//--------------------------------------------------------------------------
// LuaJIT bytecode listing module.
//
// Copyright (C) 2005-2017 Mike Pall. All rights reserved.
// Released under the MIT license. See Copyright Notice in luajit.h
//--------------------------------------------------------------------------
//
// This module lists the bytecode of a Lua function. If it's loaded by -jbc
// it hooks into the parser and lists all functions of a chunk as they
// are parsed.
//
// Example usage:
//
//   luajit -jbc -e 'local x=0; for i=1,1e6 do x=x+i end; print(x)'
//   luajit -jbc=- foo.lua
//   luajit -jbc=foo.list foo.lua
//
// Default output is to stderr. To redirect the output to a file, pass a
// filename as an argument (use '-' for stdout) or set the environment
// variable LUAJIT_LISTFILE. The file is overwritten every time the module
// is started.
//
// This module can also be used programmatically:
//
//   local bc = require("jit.bc")
//
//   local function foo() print("hello") end
//
//   bc.dump(foo)           --> -- BYTECODE -- [...]
//   print(bc.line(foo, 2)) --> 0002    KSTR     1   1      ; "hello"
//
//   local out = {
//     -- Do something with each line:
//     write = function(t, ...) io.write(...) end,
//     close = function(t) end,
//     flush = function(t) end,
//   }
//   bc.dump(foo, out)
//
//----------------------------------------------------------------------------

// Cache some library functions and objects.
var jit = require("jit");
assert(jit.version_num == 10000, "LuaJIT core/library version mismatch");
var jutil = require("jit.util");
var vmdef = require("jit.vmdef");
var bit = require("bit");
var sub, gsub, format = string.sub, string.gsub, string.format;
var byte, band, shr = string.byte, bit.band, bit.rshift;
var funcinfo, funcbc, funck = jutil.funcinfo, jutil.funcbc, jutil.funck;
var funcuvname = jutil.funcuvname;
var bcnames = vmdef.bcnames;
var stdout, stderr = io.stdout, io.stderr;

//----------------------------------------------------------------------------

var function ctlsub(c) {
  if( c == "\n" ) { return "\\n";
  } else if( c == "\r" ) { return "\\r";
  } else if( c == "\t" ) { return "\\t";
  } else { return format("\\%03d", byte(c));
  }
}

// Return one bytecode line.
var function bcline(func, pc, prefix) {
  var ins, m = funcbc(func, pc);
  if( ! ins ) { return; }
  var ma, mb, mc = band(m, 7), band(m, 15*8), band(m, 15*128);
  var a = band(shr(ins, 8), 0xff);
  var oidx = 6*band(ins, 0xff);
  var op = sub(bcnames, oidx+1, oidx+6);
  var s = format("%04d %s %-6s %3s ",
    pc, prefix || "  ", op, ma == 0 && "" || a);
  var d = shr(ins, 16);
  if( mc == 13*128 ) { // BCMjump
    return format("%s=> %04d\n", s, pc+d-0x7fff);
  }
  if( mb != 0 ) {
    d = band(d, 0xff);
  } else if( mc == 0 ) {
    return s.."\n";
  }
  var kc;
  if( mc == 10*128 ) { // BCMstr
    kc = funck(func, -d-1);
    kc = format(#kc > 40 && '"%.40s"~' || '"%s"', gsub(kc, "%c", ctlsub));
  } else if( mc == 9*128 ) { // BCMnum
    kc = funck(func, d);
    if( op == "TSETM " ) { kc = kc - 2**52; }
  } else if( mc == 12*128 ) { // BCMfunc
    var fi = funcinfo(funck(func, -d-1));
    if( fi.ffid ) {
      kc = vmdef.ffnames[fi.ffid];
    } else {
      kc = fi.loc;
    }
  } else if( mc == 5*128 ) { // BCMuv
    kc = funcuvname(func, d);
  }
  if( ma == 5 ) { // BCMuv
    var ka = funcuvname(func, a);
    if( kc ) { kc = ka.." ; "..kc; } else { kc = ka; }
  }
  if( mb != 0 ) {
    var b = shr(ins, 24);
    if( kc ) { return format("%s%3d %3d  ; %s\n", s, b, d, kc); }
    return format("%s%3d %3d\n", s, b, d);
  }
  if( kc ) { return format("%s%3d      ; %s\n", s, d, kc); }
  if( mc == 7*128 && d > 32767 ) { d -=   65536; } // BCMlits
  return format("%s%3d\n", s, d);
}

// Collect branch targets of a function.
var function bctargets(func) {
  var target = {};
  for( pc=1,1000000000 ) {
    var ins, m = funcbc(func, pc);
    if( ! ins ) { break; }
    if( band(m, 15*128) == 13*128 ) { target[pc+shr(ins, 16)-0x7fff] = true; }
  }
  return target;
}

// Dump bytecode instructions of a function.
var function bcdump(func, out, all) {
  if( ! out ) { out = stdout; }
  var fi = funcinfo(func);
  if( all && fi.children ) {
    for( n=-1,-1000000000,-1 ) {
      var k = funck(func, n);
      if( ! k ) { break; }
      if( type(k) == "proto" ) { bcdump(k, out, true); }
    }
  }
  out->write(format("-- BYTECODE -- %s-%d\n", fi.loc, fi.lastlinedefined));
  var target = bctargets(func);
  for( pc=1,1000000000 ) {
    var s = bcline(func, pc, target[pc] && "=>");
    if( ! s ) { break; }
    out->write(s);
  }
  out->write("\n");
  out->flush();
}

//----------------------------------------------------------------------------

// Active flag and output file handle.
var active, out;

// List handler.
var function h_list(func) {
  return bcdump(func, out);
}

// Detach list handler.
var function bclistoff() {
  if( active ) {
    active = false;
    jit.attach(h_list);
    if( out && out != stdout && out != stderr ) { out->close(); }
    out = null;
  }
}

// Open the output file and attach list handler.
var function bcliston(outfile) {
  if( active ) { bclistoff(); }
  if( ! outfile ) { outfile = os.getenv("LUAJIT_LISTFILE"); }
  if( outfile ) {
    out = outfile == "-" && stdout || assert(io.open(outfile, "w"));
  } else {
    out = stderr;
  }
  jit.attach(h_list, "bc");
  active = true;
}

// Public module functions.
return {
  line = bcline,
  dump = bcdump,
  targets = bctargets,
  on = bcliston,
  off = bclistoff,
  start = bcliston // For -j command line option.
};

