// life.lua
// original by Dave Bollinger <DBollinger@compuserve.com> posted to lua-l
// modified to use ANSI terminal escape sequences
// modified to use for instead of while

var write=io.write;

ALIVE="¥";	DEAD="þ";
ALIVE="O";	DEAD="-";

function delay() { // NOTE: SYSTEM-DEPENDENT, adjust as necessary
  for( i=1,10000 ) { }
  // local i=os.clock()+1 while(os.clock()<i) do end
}

function ARRAY2D(w,h) {
  var t = {w=w,h=h};
  for( y=1,h ) {
    t[y] = {};
    for( x=1,w ) {
      t[y][x]=0;
    }
  }
  return t;
}

_CELLS = {};

// give birth to a "shape" within the cell array
function _CELLS::spawn(shape,left,top) {
  for( y=0,shape.h-1 ) {
    for( x=0,shape.w-1 ) {
      this[top+y][left+x] = shape[y*shape.w+x+1];
    }
  }
}

// run the CA and produce the next generation
function _CELLS::evolve(next) {
  var ym1,y,yp1,yi=this.h-1,this.h,1,this.h;
  while( yi > 0 ) {
    var xm1,x,xp1,xi=this.w-1,this.w,1,this.w;
    while( xi > 0 ) {
      var sum = this[ym1][xm1] + this[ym1][x] + this[ym1][xp1] +
                  this[y][xm1] + this[y][xp1] +
                  this[yp1][xm1] + this[yp1][x] + this[yp1][xp1];
      next[y][x] = ((sum==2) && this[y][x]) || ((sum==3) && 1) || 0;
      xm1,x,xp1,xi = x,xp1,xp1+1,xi-1;
    }
    ym1,y,yp1,yi = y,yp1,yp1+1,yi-1;
  }
}

// output the array to screen
function _CELLS::draw() {
  var out=""; // accumulate to reduce flicker
  for( y=1,this.h ) {
   for( x=1,this.w ) {
      out=out..(((this[y][x]>0) && ALIVE) || DEAD);
    }
    out=out.."\n";
  }
  write(out);
}

// constructor
function CELLS(w,h) {
  var c = ARRAY2D(w,h);
  c.spawn = _CELLS.spawn;
  c.evolve = _CELLS.evolve;
  c.draw = _CELLS.draw;
  return c;
}

//
// shapes suitable for use with spawn() above
//
HEART = { 1,0,1,1,0,1,1,1,1; w=3,h=3 };
GLIDER = { 0,0,1,1,0,1,0,1,1; w=3,h=3 };
EXPLODE = { 0,1,0,1,1,1,1,0,1,0,1,0; w=3,h=4 };
FISH = { 0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0; w=5,h=4 };
BUTTERFLY = { 1,0,0,0,1,0,1,1,1,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,1; w=5,h=5 };

// the main routine
function LIFE(w,h) {
  // create two arrays
  var thisgen = CELLS(w,h);
  var nextgen = CELLS(w,h);

  // create some life
  // about 1000 generations of fun, then a glider steady-state
  thisgen->spawn(GLIDER,5,4);
  thisgen->spawn(EXPLODE,25,10);
  thisgen->spawn(FISH,4,12);

  // run until break
  var gen=1;
  write("\027[2J");	// ANSI clear screen
  while( 1 ) {
    thisgen->evolve(nextgen);
    thisgen,nextgen = nextgen,thisgen;
    write("\027[H");	// ANSI home cursor
    thisgen->draw();
    write("Life - generation ",gen,"\n");
    ++gen;
    if( gen>10000 ) { break; }
    //delay()		-- no delay
  }
}

LIFE(40,20);
