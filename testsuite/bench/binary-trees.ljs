
var function BottomUpTree(item, depth) {
  if( depth > 0 ) {
    var i = item + item;
    --depth    ;
    var left, right = BottomUpTree(i-1, depth), BottomUpTree(i, depth);
    return { item, left, right };
  } else {
    return { item };
  }
}

var function ItemCheck(tree) {
  if( tree[2] ) {
    return tree[1] + ItemCheck(tree[2]) - ItemCheck(tree[3]);
  } else {
    return tree[1];
  }
}

var N = tonumber(arg && arg[1]) || 0;
var mindepth = 4;
var maxdepth = mindepth + 2;
if( maxdepth < N ) { maxdepth = N; }

{
  var stretchdepth = maxdepth + 1;
  var stretchtree = BottomUpTree(0, stretchdepth);
  io.write(string.format("stretch tree of depth %d\t check: %d\n",
    stretchdepth, ItemCheck(stretchtree)));
}

var longlivedtree = BottomUpTree(0, maxdepth);

for( depth=mindepth,maxdepth,2 ) {
  var iterations = 2 ** (maxdepth - depth + mindepth);
  var check = 0;
  for( i=1,iterations ) {
    check = check + ItemCheck(BottomUpTree(1, depth)) +
            ItemCheck(BottomUpTree(-1, depth));
  }
  io.write(string.format("%d\t trees of depth %d\t check: %d\n",
    iterations*2, depth, check));
}

io.write(string.format("long lived tree of depth %d\t check: %d\n",
  maxdepth, ItemCheck(longlivedtree)));
