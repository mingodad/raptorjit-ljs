//----------------------------------------------------------------------------
// Lua SciMark (2010-12-20).
//
// A literal translation of SciMark 2.0a, written in Java and C.
// Credits go to the original authors Roldan Pozo and Bruce Miller.
// See: http://math.nist.gov/scimark2/
//----------------------------------------------------------------------------

var SCIMARK_VERSION = "2010-12-10";
var SCIMARK_COPYRIGHT = "Copyright (C) 2006-2010 Mike Pall";

var MIN_TIME = 2.0;
var RANDOM_SEED = 101009; // Must be odd.
var SIZE_SELECT = "small";

var benchmarks = {
  "FFT", "SOR", "MC", "SPARSE", "LU",
  small = {
    FFT		= { 1024 },
    SOR		= { 100 },
    MC		= { },
    SPARSE	= { 1000, 5000 },
    LU		= { 100 },
  },
  large = {
    FFT		= { 1048576 },
    SOR		= { 1000 },
    MC		= { },
    SPARSE	= { 100000, 1000000 },
    LU		= { 1000 },
  },
};

var abs, log, sin, floor = math.abs, math.log, math.sin, math.floor;
var pi, clock = math.pi, os.clock;
var format = string.format;

//----------------------------------------------------------------------------
// Select array type: Lua tables or native (FFI) arrays
//----------------------------------------------------------------------------

var darray, iarray;

var function array_init() {
  if( jit && jit.status && jit.status() ) {
    var ok, ffi = pcall(require, "ffi");
    if( ok ) {
      darray = ffi.typeof("double[?]");
      iarray = ffi.typeof("int[?]");
      return;
    }
  }
  function darray(n) { return {}; }
  iarray = darray;
}

//----------------------------------------------------------------------------
// This is a Lagged Fibonacci Pseudo-random Number Generator with
// j, k, M = 5, 17, 31. Pretty weak, but same as C/Java SciMark.
//----------------------------------------------------------------------------

var rand, rand_init;

if( jit && jit.status && jit.status() ) {
  // LJ2 has bit operations and zero-based arrays (internally).
  var bit = require("bit");
  var band, sar = bit.band, bit.arshift;
  function rand_init(seed) {
    var Rm, Rj, Ri = iarray(17), 16, 11;
    for( i=0,16 ) { Rm[i] = 0; }
    for( i=16,0,-1 ) {
      seed = band(seed*9069, 0x7fffffff);
      Rm[i] = seed;
    }
    function rand() {
      var i = band(Ri+1, sar(Ri-16, 31));
      var j = band(Rj+1, sar(Rj-16, 31));
      Ri, Rj = i, j;
      var k = band(Rm[i] - Rm[j], 0x7fffffff);
      Rm[j] = k;
      return k * (1.0/2147483647.0);
    }
  }
} else {
  // Better for standard Lua with one-based arrays and without bit operations.
  function rand_init(seed) {
    var Rm, Rj = {}, 1;
    for( i=1,17 ) { Rm[i] = 0; }
    for( i=17,1,-1 ) {
      seed = (seed*9069) % (2**31);
      Rm[i] = seed;
    }
    function rand() {
      var j, m = Rj, Rm;
      var h = j - 5;
      if( h < 1 ) { h +=   17; }
      var k = m[h] - m[j];
      if( k < 0 ) { k +=   2147483647; }
      m[j] = k;
      if( j < 17 ) { Rj = j + 1; } else { Rj = 1; }
      return k * (1.0/2147483647.0);
    }
  }
}

var function random_vector(n) {
  var v = darray(n+1);
  for( x=1,n ) { v[x] = rand(); }
  return v;
}

var function random_matrix(m, n) {
  var a = {};
  for( y=1,m ) {
    var v = darray(n+1);
    a[y] = v;
    for( x=1,n ) { v[x] = rand(); }
  }
  return a;
}

//----------------------------------------------------------------------------
// FFT: Fast Fourier Transform.
//----------------------------------------------------------------------------

var function fft_bitreverse(v, n) {
  var j = 0;
  for( i=0,2*n-4,2 ) {
    if( i < j ) {
      v[i+1], v[i+2], v[j+1], v[j+2] = v[j+1], v[j+2], v[i+1], v[i+2];
    }
    var k = n;
    while( k <= j ) { j -=   k; k /=   2; }
    j +=   k;
  }
}

var function fft_transform(v, n, dir) {
  if( n <= 1 ) { return; }
  fft_bitreverse(v, n);
  var dual = 1;
  do {
    var dual2 = 2*dual;
    for( i=1,2*n-1,2*dual2 ) {
      var j = i+dual2;
      var ir, ii = v[i], v[i+1];
      var jr, ji = v[j], v[j+1];
      v[j], v[j+1] = ir - jr, ii - ji;
      v[i], v[i+1] = ir + jr, ii + ji;
    }
    var theta = dir * pi / dual;
    var s, s2 = sin(theta), 2.0 * sin(theta * 0.5)**2;
    var wr, wi = 1.0, 0.0;
    for( a=3,dual2-1,2 ) {
      wr, wi = wr - s*wi - s2*wr, wi + s*wr - s2*wi;
      for( i=a,a+2*(n-dual2),2*dual2 ) {
	var j = i+dual2;
	var jr, ji = v[j], v[j+1];
	var dr, di = wr*jr - wi*ji, wr*ji + wi*jr;
	var ir, ii = v[i], v[i+1];
	v[j], v[j+1] = ir - dr, ii - di;
	v[i], v[i+1] = ir + dr, ii + di;
      }
    }
    dual = dual2;
  } while(!( dual >= n) );
}

function benchmarks.FFT(n) {
  var l2n = log(n)/log(2);
  if( l2n % 1 != 0 ) {
    io.stderr->write("Error: FFT data length is not a power of 2\n");
    os.exit(1);
  }
  var v = random_vector(n*2);
  return function(cycles) {
    var norm = 1.0 / n;
    for( p=1,cycles ) {
      fft_transform(v, n, -1);
      fft_transform(v, n, 1);
      for( i=1,n*2 ) { v[i] = v[i] * norm; }
    }
    return ((5*n-2)*l2n + 2*(n+1)) * cycles;
  };
}

//----------------------------------------------------------------------------
// SOR: Jacobi Successive Over-Relaxation.
//----------------------------------------------------------------------------

var function sor_run(mat, m, n, cycles, omega) {
  var om4, om1 = omega*0.25, 1.0-omega;
  --m    ;
  --n    ;
  for( i=1,cycles ) {
    for( y=2,m ) {
      var v, vp, vn = mat[y], mat[y-1], mat[y+1];
      for( x=2,n ) {
	v[x] = om4*((vp[x]+vn[x])+(v[x-1]+v[x+1])) + om1*v[x];
      }
    }
  }
}

function benchmarks.SOR(n) {
  var mat = random_matrix(n, n);
  return function(cycles) {
    sor_run(mat, n, n, cycles, 1.25);
    return (n-1)*(n-1)*cycles*6;
  };
}

//----------------------------------------------------------------------------
// MC: Monte Carlo Integration.
//----------------------------------------------------------------------------

var function mc_integrate(cycles) {
  var under_curve = 0;
  var rand = rand;
  for( i=1,cycles ) {
    var x = rand();
    var y = rand();
    if( x*x + y*y <= 1.0 ) { ++under_curve    ; }
  }
  return (under_curve/cycles) * 4;
}

function benchmarks.MC() {
  return function(cycles) {
    var res = mc_integrate(cycles);
    assert(math.sqrt(cycles)*math.abs(res-math.pi) < 5.0, "bad MC result");
    return cycles * 4; // Way off, but same as SciMark in C/Java.
  };
}

//----------------------------------------------------------------------------
// Sparse Matrix Multiplication.
//----------------------------------------------------------------------------

var function sparse_mult(n, cycles, vy, val, row, col, vx) {
  for( p=1,cycles ) {
    for( r=1,n ) {
      var sum = 0;
      for( i=row[r],row[r+1]-1 ) { sum = sum + vx[col[i]] * val[i]; }
      vy[r] = sum;
    }
  }
}

function benchmarks.SPARSE(n, nz) {
  var nr = floor(nz/n);
  var anz = nr*n;
  var vx = random_vector(n);
  var val = random_vector(anz);
  var vy, col, row = darray(n+1), iarray(nz+1), iarray(n+2);
  row[1] = 1;
  for( r=1,n ) {
    var step = floor(r/nr);
    if( step < 1 ) { step = 1; }
    var rr = row[r];
    row[r+1] = rr+nr;
    for( i=0,nr-1 ) { col[rr+i] = 1+i*step; }
  }
  return function(cycles) {
    sparse_mult(n, cycles, vy, val, row, col, vx);
    return anz*cycles*2;
  };
}

//----------------------------------------------------------------------------
// LU: Dense Matrix Factorization.
//----------------------------------------------------------------------------

var function lu_factor(a, pivot, m, n) {
  var min_m_n = m < n && m || n;
  for( j=1,min_m_n ) {
    var jp, t = j, abs(a[j][j]);
    for( i=j+1,m ) {
      var ab = abs(a[i][j]);
      if( ab > t ) {
	jp = i;
	t = ab;
      }
    }
    pivot[j] = jp;
    if( a[jp][j] == 0 ) { error("zero pivot"); }
    if( jp != j ) { a[j], a[jp] = a[jp], a[j]; }
    if( j < m ) {
      var recp = 1.0 / a[j][j];
      for( k=j+1,m ) {
	var v = a[k];
	v[j] = v[j] * recp;
      }
    }
    if( j < min_m_n ) {
      for( i=j+1,m ) {
	var vi, vj = a[i], a[j];
	var eij = vi[j];
	for( k=j+1,n ) { vi[k] = vi[k] - eij * vj[k]; }
      }
    }
  }
}

var function matrix_alloc(m, n) {
  var a = {};
  for( y=1,m ) { a[y] = darray(n+1); }
  return a;
}

var function matrix_copy(dst, src, m, n) {
  for( y=1,m ) {
    var vd, vs = dst[y], src[y];
    for( x=1,n ) { vd[x] = vs[x]; }
  }
}

function benchmarks.LU(n) {
  var mat = random_matrix(n, n);
  var tmp = matrix_alloc(n, n);
  var pivot = iarray(n+1);
  return function(cycles) {
    for( i=1,cycles ) {
      matrix_copy(tmp, mat, n, n);
      lu_factor(tmp, pivot, n, n);
    }
    return 2.0/3.0*n*n*n*cycles;
  };
}

//----------------------------------------------------------------------------
// Main program.
//----------------------------------------------------------------------------

var function printf(...) {
  io.write(format(...));
}

var function fmtparams(p1, p2) {
  if( p2 ) { return format("[%d, %d]", p1, p2);
  } else if( p1 ) { return format("[%d]", p1); }
  return "";
}

var function measure(min_time, name, ...) {
  array_init();
  rand_init(RANDOM_SEED);
  var run = benchmarks[name](...);
  var cycles = 1;
  do {
    var tm = clock();
    var flops = run(cycles, ...);
    tm = clock() - tm;
    if( tm >= min_time ) {
      var res = flops / tm * 1.0e-6;
      var p1, p2 = ...;
      printf("%-7s %8.2f  %s\n", name, res, fmtparams(...));
      return res;
    }
    cycles *=   2;
  } while(!( false) );
}

printf("Lua SciMark %s based on SciMark 2.0a. %s.\n\n",
       SCIMARK_VERSION, SCIMARK_COPYRIGHT);

while( arg && arg[1] ) {
  var a = table.remove(arg, 1);
  if( a == "-noffi" ) {
    package.preload.ffi = null;
  } else if( a == "-small" ) {
    SIZE_SELECT = "small";
  } else if( a == "-large" ) {
    SIZE_SELECT = "large";
  } else if( benchmarks[a] ) {
    var p = benchmarks[SIZE_SELECT][a];
    measure(MIN_TIME, a, tonumber(arg[1]) || p[1], tonumber(arg[2]) || p[2]);
    return;
  } else {
    printf("Usage: scimark [-noffi] [-small|-large] [BENCH params...]\n\n");
    printf("BENCH   -small         -large\n");
    printf("---------------------------------------\n");
    for( _,name in ipairs(benchmarks) ) {
      printf("%-7s %-13s %s\n", name,
	     fmtparams(unpack(benchmarks.small[name])),
	     fmtparams(unpack(benchmarks.large[name])));
    }
    printf("\n");
    os.exit(1);
  }
}

var params = benchmarks[SIZE_SELECT];
var sum = 0;
for( _,name in ipairs(benchmarks) ) {
  sum +=   measure(MIN_TIME, name, unpack(params[name]));
}
printf("\nSciMark %8.2f  [%s problem sizes]\n", sum / #benchmarks, SIZE_SELECT);
io.flush();

