
// Generate a decision tree based solver for the meteor puzzle.
var function generatesolver(countinit) {
  var pairs, ipairs, format = pairs, ipairs, string.format;
  var byte, min, sort = string.byte, math.min, table.sort;

  // Cached position to distance lookup.
  var dist = setmetatable({}, { __index = function(t, xy) {
    var x = xy%10; var y = (xy-x)/10;
    if( (x+y)%2 == 1 ) { ++y    ; x = 10 - x; }
    var d = xy + 256*x*x + 1024*y*y; t[xy] = d; return d;
  }});

  // Lookup table to validate a cell and to find its successor.
  var ok = {};
  for( i=0,150 ) { ok[i] = false; }
  for( i=99,0,-1 ) {
    var x = i%10;
    if( ((i-x)/10+x)%2 == 0 ) {
      ok[i] = i + (ok[i+1] && 1 || (ok[i+2] && 2 || 3));
    }
  }

  // Temporary board state for the island checks.
  var islands, slide = {}, {20,22,24,26,28,31,33,35,37,39};
  var bbc, bb = 0, {};
  for( i=0,19 ) { bb[i] = false; bb[i+80] = false; }
  for( i=20,79 ) { bb[i] = ok[i]; }

  // Recursive flood fill algorithm.
  var function fill(bb, p) {
    ++bbc    ;
    var n = p+2; if( bb[n] ) { bb[n] = false; fill(bb, n); }
    n = p-2; if( bb[n] ) { bb[n] = false; fill(bb, n); }
    n = p-9; if( bb[n] ) { bb[n] = false; fill(bb, n); }
    n = p-11; if( bb[n] ) { bb[n] = false; fill(bb, n); }
    n = p+9; if( bb[n] ) { bb[n] = false; fill(bb, n); }
    n = p+11; if( bb[n] ) { bb[n] = false; fill(bb, n); }
  }

  // Generate pruned, sliding decision trees.
  var dtrees = {{}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
  var rot = { null, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {} };
  for( k=0,9 ) {
    // Generate 10 initial pieces from line noise. :-)
    var t = { 60, 62, byte("@BMBIK@KT@GPIKR@IKIKT@GK@KM@BG", k*3+1, k*3+3) };
    rot[1] = t;
    for( i,xy in ipairs(t) ) {
      var x = xy%10; var y = (xy-x-60)/10;
      // Add 11 more variations by rotating and flipping.
      for( j=2,12 ) {
	if( j == 7 ) { y = -y; } else { x,y = (x+3*y)/2, (y-x)/2; }
	rot[j][i] = x+10*y;
      }
    }
    for( r,v in ipairs(rot) ) {
      // Exploit symmetry and leave out half of the orientations of one piece.
      // The selected piece gives the best reduction of the solution space.
      if( k != 3 || r%2 == 0 ) {
	// Normalize to origin, add distance, sort by distance from origin.
	var m = min(v[1], v[2], v[3], v[4], v[5]);
	for( i=1,5 ) { v[i] = dist[v[i]-m]; }
	sort(v);
	var v2, v3, v4, v5 = v[2]%256, v[3]%256, v[4]%256, v[5]%256;
	// Slide the piece across 2 rows, prune the tree, check for islands.
	for( j,p in ipairs(slide) ) {
	  bb[p] = false;
	  if( ok[p+v2] && ok[p+v3] && ok[p+v4] && ok[p+v5] ) { // Prune.
	    for( i=p+1,79 ) { bb[i] = ok[i]; } // Clear remaining board.
	    bb[p+v2] = false; bb[p+v3] = false; // Add piece.
	    bb[p+v4] = false; bb[p+v5] = false;
	    bbc = j; // Flood fill and count the filled positions.
	    if( bb[71] ) { bb[71] = false; fill(bb, 71); } // Lower left.
	    if( bb[79] ) { bb[79] = false; fill(bb, 79); } // Lower right.
	    var di = 0;
	    if( bbc < 22 ) { bbc = 26;
	    } else if( bbc < 26 ) { // Island found, locate it, fill from above.
	      for( i=p+2,79 ) { if( bb[i] ) { di = i-p; break; } }
	      for( i=p-9,p-1 ) { if( ok[i] ) { fill(bb, i); --bbc    ; } }
	    }
	    if( bbc == 26 ) { // Prune boards with static islands.
	      var tb = dtrees[j]; // Build decision tree in distance order.
	      var ta = tb[v2]; if( ! ta ) { ta = {}; tb[v2] = ta; }
	      tb = ta[v3]; if( ! tb ) { tb = {}; ta[v3] = tb; }
	      ta = tb[v4]; if( ! ta ) { ta = {}; tb[v4] = ta; islands[ta] = di;
	      } else if( islands[ta] != di ) { islands[ta] = 0; }
	      ta[v5] = di*10+k; // Leaves hold island check and piece number.
	    }
	  }
	}
      }
    }
  }

  var s = "var u0,u1,u2,u3,u4,u5,u6,u7,u8,u9"; // Piece use flags.
  for( p=0,99 ) { if( ok[p] ) { s = s..",b"..p; } } // Board cells.
  s = s.."\n"..[=[
var countinit = ...;
var count = countinit;
var bmin, bmax, pcs = 9, 0, {};
var smin, smax;
var write, reverse = io.write, string.reverse;

// Print min/max boards.
var function printboard(s) {
  var flip = true;
  for( x in string.gmatch(string.gsub(s, ".", "%1 "), "..........") ) {
    write(x, flip && "\n " || "\n");
    flip = ! flip;
  }
  write("\n");
}

// Print result.
var function printresult() {
  write(countinit-count, " solutions found\n\n");
  printboard(smin);
  printboard(smax);
}

// Generate piece lookup array from the order of use.
var function genp() {
  var p = pcs;
  p[u0] = "0"; p[u1] = "1"; p[u2] = "2"; p[u3] = "3"; p[u4] = "4";
  p[u5] = "5"; p[u6] = "6"; p[u7] = "7"; p[u8] = "8"; p[u9] = "9";
  return p;
}

// Goal function.
local function f91(k) {
  if( k != 10 ) { return; }
  count -=   2; // Need to count the symmetric solution, too.
  do {
    // Quick precheck before constructing the string.
    var b0, b99 = b0, b99;
    if( b0 <= bmin ) { bmin = b0; } else if( b0 >= bmax ) { bmax = b0;
    } else if( b99 <= bmin ) { bmin = b99; } else if( b99 >= bmax ) { bmax = b99;
    } else { break; }
    // Translate the filled board to a string.
    var p = genp();
    var s = p[b0] ]=];
  for( p=2,99 ) { if( ok[p] ) { s = s.."..p[b"..p.."]"; } }
  s = s..[=[
    // Remember min/max boards, dito for the symmetric board.
    if( ! smin ) { smin = s; smax = s;
    } else if( s < smin ) { smin = s; } else if( s > smax ) { smax = s; }
    s = reverse(s);
    if( s < smin ) { smin = s; } else if( s > smax ) { smax = s; }
  } while (false);
  if( count <= 0 ) { error();} // Early abort if max count given.
}
var f93 = f91;
]=];

  // Recursively convert the decision tree to Lua code.
  var function codetree(tree, d, p, pn) {
    var found, s = false, "";
    ++d    ;
    for( a,t in pairs(tree) ) {
      var b = p+a;
      if( b < 100 ) { // Prune the tree at the lower border.
	var pp = b != pn && pn || ok[b]; // Find maximum successor function.
	if( d >= 5 ) { // Try to place the last cell of a piece and advance.
	  found = true;
	  var u = t%10;
	  var di = (t-u)/10;
	  if( di != 0 && d == 5 ) {
	    di +=   p; if( pp == di ) { pp = ok[di]; }
	    s = format("%sif( b%d && ! u%d && ! b%d ) { b%d=k; u%d=k; f%d(k); u%d=N; b%d=N; }\n",
		       s, di, u, b, b, u, pp, u, b);
	  } else {
	    s = format("%sif( ! u%d && ! b%d ) { b%d=k; u%d=k; f%d(k); u%d=N; b%d=N; }\n",
		       s, u, b, b, u, pp, u, b);
	  }
	} else { // Try to place an intermediate cell.
	  var di = d != 4 && 0 || islands[t];
	  if( di == 0 ) {
	    var st = codetree(t, d, p, pp);
	    if( st ) {
	      found = true;
	      s = format("%sif( ! b%d ) { b%d=k;\n%sb%d=N; }\n", s, b, b, st, b);
	    }
	  } else { // Combine island checks.
	    di +=   p; if( pp == di ) { pp = ok[di]; }
	    var st = codetree(t, 6, p, pp);
	    if( st ) {
	      found = true;
	      s = format("%sif( b%d && ! b%d ) { b%d=k;\n%sb%d=N; }\n", s, di, b, b, st, b);
	    }
	  }
	}
      }
    }
    return found && s;
  }

  // Embed the decision tree into a function hierarchy.
  var j = 5;
  for( p=88,0,-1 ) {
    var pn = ok[p];
    if( pn ) {
      s = format("%svar function f%d(k){\nvar N; if( b%d ) { return f%d(k); } k=k+1; b%d=k;\n%sb%d=N; }\n",
	    s, p, p, pn, p, codetree(dtrees[j], 1, p, pn), p);
      --j    ; if( j == 0 ) { j = 10; }
    }
  }

  // Compile and return solver function and result getter.
  return loadstring(s.."return f0, printresult\n", "solver")(countinit);
}

// Generate the solver function hierarchy.
var solver, printresult = generatesolver(tonumber(arg && arg[1]) || 10000);

// The optimizer for LuaJIT 1.1.x is not helpful here, so turn it off.
if( jit && jit.opt && jit.version_num < 10200 ) { jit.opt.start(0); }

// Run the solver protected to get partial results (max count or ctrl-c).
pcall(solver, 0);
printresult();
