var assert = assert;

{ //- DCE or sink trivial TNEW or TDUP.
  for( i=1,100 ) { var t={}; }
  for( i=1,100 ) { var t={1}; }
}

{ //- Sink TNEW/TDUP + ASTORE/HSTORE.
  for( i=1,100 ) { var t={i}; assert(t[1] == i); }
  for( i=1,100 ) { var t={foo=i}; assert(t.foo == i); }
  for( i=1,100 ) { var t={1,i}; assert(t[2] == i); }
  for( i=1,100 ) { var t={bar=1,foo=i}; assert(t.foo == i); }
}

{ //- Sink outermost table of nested TNEW.
  var x;
  for( i=1,100 ) {
    var t = {[0]={{1,i}}};
    if( i == 90 ) { x = t; }
    assert(t[0][1][2] == i);
  }
  assert(x[0][1][2] == 90);
  for( i=1,100 ) {
    var t = {foo={bar={baz=i}}};
    if( i == 90 ) { x = t; }
    assert(t.foo.bar.baz == i);
  }
  assert(x.foo.bar.baz == 90);
}

{ //- Sink one TNEW + FSTORE.
  for( i=1,100 ) { var t = setmetatable({}, {}); }
}

{ //- Sink TDUP or TDUP + HSTORE. Guard of HREFK eliminated.
  var x;
  for( i=1,100 ) { var t = { foo = 1 }; x = t.foo; }
  assert(x == 1);
  for( i=1,100 ) { var t = { foo = i }; x = t.foo; }
  assert(x == 100);
}

{ //- Sink of simplified complex add, unused in next iteration, drop PHI.
  var x={1,2};
  for( i=1,100 ) { x = {x[1]+3, x[2]+4}; }
  assert(x[1] == 301);
  assert(x[2] == 402);
}

{ //- Sink of complex add, unused in next iteration, drop PHI.
  var x,k={1.5,2.5},{3.5,4.5};
  for( i=1,100 ) { x = {x[1]+k[1], x[2]+k[2]}; }
  assert(x[1] == 351.5);
  assert(x[2] == 452.5);
}

{ //- Sink of TDUP with stored values that are both PHI and non-PHI.
  var x,k={1,2},{3,4};
  for( i=1,100 ) { x = {x[1]+k[1], k[2]}; }
  assert(x[1] == 301);
  assert(x[2] == 4);
}

{ //- Sink of CONV.
  var t = {1};
  var x,y;
  for( i=1,200 ) {
    var v = {i};
    var w = {i+1};
    x = v[1];
    y = w[1];
    if( i > 100 ) { }
  }
  assert(x == 200 && y == 201);
}

{ //- Sink of stores with numbers.
  var x = {1.5, 0};
  for( i=1,200 ) { x = {x[1]+1, 99.5}; x[2]=4.5; if( i > 100 ) { } }
  assert(x[1] == 201.5);
  assert(x[2] == 4.5);
}

{ //- Sink of stores with constants.
  for( i=1,100 ) { var t = {false}; t[1] = true; if( i > 100 ) { g=t; } }
}

{ //- Sink with two references to the same table.
  for( i=1,200 ) {
    var t = {i};
    var q = t;
    if( i > 100 ) { assert(t == q); }
  }
}

{ //- point
  var point;
  point = {
    new = function(this, x, y) {
      return setmetatable({x=x, y=y}, this);
    },
    __add = function(a, b) {
     return point->new(a.x + b.x, a.y + b.y);
    },
  };
  point.__index = point;
  var a, b = point->new(1, 1), point->new(2, 2);
  for( i=1,100 ) { a = (a + b) + b; }
  assert(a.x == 401);
  assert(a.y == 401);
  assert(getmetatable(a) == point);
  for( i=1,200 ) { a = (a + b) + b; if( i > 100 ) { } }
  assert(a.x == 1201);
  assert(a.y == 1201);
  assert(getmetatable(a) == point);
}

{ //- untitled
  var t = {};
  for( i=1,20 ) { t[i] = 1; }
  for( i=1,20 ) {
    for( a,b in ipairs(t) ) {
      var s = {i};
    }
  }
}
