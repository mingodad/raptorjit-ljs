var assert = assert;

{ //- Cannot sink TNEW, aliased load.
  var k = 1;
  for( i=1,100 ) { var t={i}; assert(t[k]==i); }
  for( i=1,100 ) { var t={}; t[k]=i; assert(t[1]==i); }
}

{ //- Cannot sink TNEW, escaping to upvalue.
  (function() {
    var uv;
    return function() {
      for( i=1,100 ) { uv = {i}; }
      assert(uv[1] == 100);
    };
  })()();
}

{ //- Cannot sink TNEW, escaping through a store.
  var t = {};
  for( i=1,100 ) { t[1] = {i}; }
  for( i=1,100 ) { t.foo = {i}; }
  for( i=1,100 ) { setmetatable(t, {i}); }
  assert(t[1][1] == 100);
  assert(t.foo[1] == 100);
  assert(getmetatable(t)[1] == 100);
}

{ //- Cannot sink TNEW, iteratively escaping through a store.
  var t = {};
  for( i=1,100 ) { t[1] = {i}; t[1][1] = {i}; }
  assert(t[1][1][1] == 100);
}

{ //- Cannot sink TNEW, escaping to next iteration (unused in 1st variant).
  var t;
  for( i=1,200 ) { t = {i}; }
  assert(t[1] == 200);
  for( i=1,200 ) { if( i > 100 ) { assert(t[1] == i-1); } t = {i}; }
  assert(t[1] == 200);
}

{ //- Cannot sink TNEW, escaping to next iteration (snapshot ref).
  var t,x;
  for( i=1,100 ) { x=t; t={i}; }
  assert(t[1] == 100);
  assert(x[1] == 99);
}

{ //- Cannot sink TNEW, escaping to next iteration (IR/snapshot ref).
  var t;
  for( i=1,100 ) { t={t}; }
  assert(type(t[1][1][1]) == "table");
}

{ //- Cannot sink inner TNEW, escaping to next iteration (IR ref).
  // (Could sink outer TNEW, but the logic for stores to PHI allocs is too simple).
  var t = {42, 43};
  for( i=1,100 ) { t={t[2], {i}}; }
  assert(t[2][1] == 100);
  assert(t[1][1] == 99);
}

{ //- Cannot sink TNEW, cross-PHI ref (and snapshot ref).
  var x,y;
  for( i=1,100 ) { x,y={i},x; }
  assert(x[1] == 100);
  assert(y[1] == 99);
}

{ //- Cannot sink TNEW, cross-PHI ref (and snapshot ref).
  var x,y;
  for( i=1,100 ) { x,y=y,{i}; }
  assert(x[1] == 99);
  assert(y[1] == 100);
}

{ //- Cannot sink TNEW, escaping to exit.
  var function f(n, t) {
    if( n == 0 ) { return t; }
    return (f(n-1, {t}));
  }
  var t = f(100, 42);
  assert(type(t[1][1][1]) == "table");
  t = f(3, 42);
  assert(t[1][1][1] == 42);
}

{ //- Cannot sink TNEW, escaping to exit.
  var function f(n) {
    if( n == 0 ) { return 42; }
    var t = f(n-1);
    return {t};
  }
  for( i=1,20 ) {
    var t = f(100);
    assert(type(t[1][1][1]) == "table");
  }
  var t = f(3);
  assert(t[1][1][1] == 42);
}

{ //- Cannot sink, since nested inner table is non-PHI.
  var a, b = {{1}}, {{1}};
  for( i=1,10000 ) { // Need to force GC exit sometimes
    a = {{a[1][1]+b[1][1]}};
  }
  assert(a[1][1] == 10001);
}
