{ //- 1.
  var x = 2;
  for( i=1,100 ) {
    var t = {};	// TNEW: DCE
    x = t.foo;		// HREF -> niltv: folded
  }
  assert(x == null);
}

{ //- 2.
  var x = 2;
  for( i=1,100 ) {
    var t = {1};	// TDUP: DCE
    x = t.foo;		// HREF -> niltv: folded
  }
  assert(x == null);
}

{ //- 3.
  var x = 2;
  for( i=1,100 ) {
    var t = {};
    t[1] = 11;		// NEWREF + HSTORE
    x = t[1];		// AREF + ALOAD, no forwarding, no fold
  }
  assert(x == 11);
}

{ //- 4. HREFK not eliminated. Ditto for the EQ(FLOAD(t, #tab.hmask), k).
  var x = 2;
  for( i=1,100 ) {
    var t = {};
    t.foo = 11;		// NEWREF + HSTORE
    x = t.foo;		// HREFK + HLOAD: store forwarding
  }
  assert(x == 11);
}

{ //- 5. HREFK not eliminated. Ditto for the EQ(FLOAD(t, #tab.hmask), k).
  var x = 2;
  for( i=1,100 ) {
    var t = {foo=11};	// TDUP
    x = t.foo;		// HREFK + non-nil HLOAD: folded
  }
  assert(x == 11);
}

{ //- 6.
  var x = 2;
  var k = 1;
  for( i=1,100 ) {
    var t = {[0]=11};	// TDUP
    t[k] = 22;		// AREF + ASTORE aliasing
    x = t[0];		// AREF + ALOAD, no fold
  }
  assert(x == 11);
}

{ //- 7.
  var setmetatable = setmetatable;
  var mt = { __newindex = function(t, k, v) {
    assert(k == "foo");
    assert(v == 11);
  } };
  for( i=1,100 ) {
    var t = setmetatable({}, mt);
    t.foo = 11;
  }
}
