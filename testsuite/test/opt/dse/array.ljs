var assert = assert;

// Same value ----------------------------------------------------------------

{ //- 1
// Store with same ref and same value.
// 2nd store eliminated. All stores in loop eliminated.
  var t = { 1, 2 };
  for( i=1,100 ) {
    t[1] = 11;
    assert(t[1] == 11);
    t[1] = 11;
    assert(t[1] == 11);
  }
  assert(t[1] == 11);
}

{ //- 2
// Store with different tab, same idx and same value.
// All stores in loop eliminated.
  var t1 = { 1, 2 };
  var t2 = { 1, 2 };
  for( i=1,100 ) {
    t1[1] = 11;
    assert(t1[1] == 11);
    t2[1] = 11;
    assert(t2[1] == 11);
  }
  assert(t1[1] == 11);
  assert(t2[1] == 11);
}

{ //- 3
// Store with same tab, different const idx and same value.
// All stores in loop eliminated. Also disambiguated.
  var t = { 1, 2 };
  for( i=1,100 ) {
    t[1] = 11;
    assert(t[1] == 11);
    t[2] = 11;
    assert(t[2] == 11);
  }
  assert(t[1] == 11);
  assert(t[2] == 11);
}

{ //- 4
// Store with different tab, different const idx and same value.
// All stores in loop eliminated. Also disambiguated.
  var t1 = { 1, 2 };
  var t2 = { 1, 2 };
  for( i=1,100 ) {
    t1[1] = 11;
    assert(t1[1] == 11);
    t2[2] = 11;
    assert(t2[2] == 11);
  }
  assert(t1[1] == 11);
  assert(t2[2] == 11);
}

{ //- 5
// Store with different tab, different non-const idx and same value.
// All stores in loop eliminated. Not disambiguated (but not needed).
  var t1 = { 1, 2 };
  var t2 = { 1, 2 };
  var k = 1;
  for( i=1,100 ) {
    t1[k] = 11;
    assert(t1[k] == 11);
    t2[2] = 11;
    assert(t2[2] == 11);
  }
  assert(t1[1] == 11);
  assert(t2[2] == 11);
}

{ //- 6
// Store with same ref, same value and aliased loads.
// 2nd store eliminated. Not disambiguated (but not needed).
  var t1 = { 1, 2 };
  var t2 = t1;
  for( i=1,100 ) {
    t1[1] = 11;
    assert(t2[1] == 11);
    t1[1] = 11;
    assert(t2[1] == 11);
  }
  assert(t1[1] == 11);
}

// Different value -----------------------------------------------------------

{ //- 7
// Store with same ref and different value.
// 1st store eliminated. All stores in loop eliminated.
  var t = { 1, 2 };
  for( i=1,100 ) {
    assert(true);
    t[1] = 11;
    assert(t[1] == 11);
    t[1] = 22;
    assert(t[1] == 22);
  }
  assert(t[1] == 22);
}

{ //- 8
// Store with different tab, same idx and different value.
// Cannot eliminate any stores (would need dynamic disambiguation).
  var t1 = { 1, 2 };
  var t2 = { 1, 2 };
  for( i=1,100 ) {
    assert(true);
    t1[1] = 11;
    assert(t1[1] == 11);
    t2[1] = 22;
    assert(t2[1] == 22);
  }
  assert(t1[1] == 11);
  assert(t2[1] == 22);
}

{ //- 9
// Store with same tab, different const idx and different value.
// Disambiguated. All stores in loop eliminated.
  var t = { 1, 2 };
  for( i=1,100 ) {
    assert(true);
    t[1] = 11;
    assert(t[1] == 11);
    t[2] = 22;
    assert(t[2] == 22);
  }
  assert(t[1] == 11);
  assert(t[2] == 22);
}

{ //- 10
// Store with different tab, different const idx and different value.
// Disambiguated. All stores in loop eliminated.
  var t1 = { 1, 2 };
  var t2 = { 1, 2 };
  for( i=1,100 ) {
    assert(true);
    t1[1] = 11;
    assert(t1[1] == 11);
    t2[2] = 22;
    assert(t2[2] == 22);
  }
  assert(t1[1] == 11);
  assert(t2[2] == 22);
}

{ //- 11
// Store with different tab, different non-const idx and different value.
// Cannot eliminate any stores (would need dynamic disambiguation).
  var t1 = { 1, 2 };
  var t2 = { 1, 2 };
  var k = 1;
  for( i=1,100 ) {
    assert(true);
    t1[k] = 11;
    assert(t1[k] == 11);
    t2[2] = 22;
    assert(t2[2] == 22);
  }
  assert(t1[1] == 11);
  assert(t2[2] == 22);
}

{ //- 12
// Store with same ref, different value and aliased loads.
// Cannot eliminate any stores (would need dynamic disambiguation).
  var t1 = { 1, 2 };
  var t2 = t1;
  for( i=1,100 ) {
    assert(true);
    t1[1] = 11;
    assert(t2[1] == 11);
    t1[1] = 22;
    assert(t2[1] == 22);
  }
  assert(t1[1] == 22);
}

{ //- CALLL must inhibit DSE.
  var a,b;
  var t = {1,2};
  for( i=1,100 ) {
    t[2]=null;
    a=#t;
    t[2]=2;
    b=#t;
  }
  assert(a == 1 && b == 2);
}
