var assert, io_open, io_lines, io_write, load, type, xpcall =
      assert, io.open, io.lines, io.write, load, type, xpcall;
var debug_traceback, math_random, tonumber, loadstring =
      debug.traceback, math.random, tonumber, loadstring || load;

var dirsep = package.config->match("^(.-)\n");
var own_file = debug.getinfo(1, "S").source->match("^@(.*)") || arg[0];
var own_dir = own_file->match("^.*[/".. dirsep .."]");

var function default_tags() {
  var tags = {};
  
  // Lua version and features
  tags.lua = tonumber(_VERSION->match("%d+%.%d+"));
  if( table.pack ) {
    tags["compat5.2"] = true;
  }
  if( loadstring("return 0xep+9") ) {
    tags.hexfloat = true;
  }
  if( loadstring("goto x x:") ) {
    tags["goto"] = true;
  }

  // Libraries
  for( _, lib in ipairs({"bit", "ffi", "jit.profile", "table.new"}) ) {
    if( pcall(require, lib) ) {
      tags[lib] = true;
    }
  }

  // LuaJIT-specific
  if( jit ) {
    tags.luajit = tonumber(jit.version->match("%d+%.%d+"));
    tags[jit.arch->lower()] = true;
    if( jit.os != "Other" ) {
      tags[jit.os->lower()] = true;
    }
    if( jit.status() ) {
      tags.jit = true;
    }
    for( _, flag in ipairs({select(2, jit.status())}) ) {
      tags[flag->lower()] = true;
    }
  }
  
  // Environment
  if( dirsep == "\\" ) {
    tags.windows = true;
  }
  if( tags.ffi ) {
    var abi = require("ffi").abi;
    for( _, param in ipairs({"le", "be", "fpu", "softfp", "hardfp", "eabi"}) ) {
      if( abi(param) ) {
        tags[param] = true;
      }
    }
    if( abi("win") ) { tags.winabi = true; }
    if( abi("32bit") ) { tags.abi32 = true; }
    if( abi("64bit") ) { tags.abi64 = true; }
  } else {
    var bytecode = string.dump(function() {});
    if( bytecode->find("^\27Lua[\80-\89]") ) {
      tags[bytecode->byte(7, 7) == 0 && "be" || "le"] = true;
      tags["abi".. (bytecode->byte(9, 9) * 8)] = true;
    }
  }
  
  return tags;
}

var function want_meta(opts, meta) {
  if( ! opts.want_meta_cache ) {
    opts.want_meta_cache = setmetatable({}, {__index = function(t, meta) {
      var result = true;
      for( polarity, tag, cond in meta->gmatch("([+-])([^ <>=]+)([<>=0-9.]*)") ) {
        var tagval = opts.tags[tag];
        var condresult;
        if( cond == "" || ! tagval ) {
          condresult = tagval;
        } else {
          condresult = assert(loadstring("return (...) ".. cond))(tagval);
        }
        if( polarity == "-" ) {
          condresult = ! condresult;
        }
        if( ! condresult ) {
          result = false;
          break;
        }
      }
      t[meta] = result;
      return result;
    }});
  }
  return opts.want_meta_cache[meta];
}

var function parse_args(t) {
  var opts = {
    tags = default_tags(),
    want_meta = want_meta,
  };
  var result = opts;
  
  var i, tlen = 1, #t;
  var joinedval = "";
  var function flagval() {
    var val;
    if( joinedval != "" ) {
      val = joinedval->sub(2);
      joinedval = "";
    } else {
      val = t[i];
      if( ! val ) { error("Expected value after ".. t[i-1]); }
      ++i    ;
    }
    return val;
  }
  
  while( i <= tlen ) {
    var arg = t[i];
    ++i    ;
    if( arg->sub(1, 2) == "--" ) {
      arg, joinedval = arg->match("^([^=]+)(=?.*)$");
      if( arg == "--quiet" ) {
        opts.quiet = true;
      } else if( arg == "--shuffle" ) {
        var seed = tonumber(flagval());
        if( ! seed ) { error("Expected numeric seed after --shuffle"); }
        opts.shuffle = seed;
      } else if( arg == "--shard" ) {
        var xi, s = flagval()->match("^(%d+)/(%d+)$");
        if( ! s ) { error("Expected integer/integer after --shard"); }
        opts.shard = {initial = tonumber(xi), step = tonumber(s)};
      } else if( arg == "--version" ) {
        io_write("LuaJIT test-suite runner v0.1\n");
        result = null;
      } else if( arg == "--help" ) {
        io_write("Usage: ", _G && _G.arg && _G.arg[-1] || "luajit", " ");
        io_write(own_file, " [flags] [tags] [root] [numbers]\n");
        io_write("\n");
        io_write("Root specifies either a directory of tests, or the name of\n");
        io_write("a particular .ljs test file, defaulting to all tests if not given.\n");
        io_write("Tags are specified in the form +tag_name or -tag_name, and\n");
        io_write("are used to turn on or off groups of tests. For example,\n");
        io_write("pass -ffi to skip tests relating to the ffi library, or\n");
        io_write("pass +slow to enable running of slow tests.\n");
        io_write("Numbers can be passed to only run particular tests.\n");
        io_write("The available flags are:\n");
        io_write("  --quiet\n");
        io_write("  --shuffle=SEED\n");
        io_write("  --shard=INDEX/NUM_SHARDS\n");
        io_write("  --version\n");
        io_write("  --help\n");
        result = null;
      } else {
        error("Unsupported flag: ".. arg);
      }
      if( joinedval != "" ) {
        error(arg .." does not expect an argument");
      }
    } else if( arg->find("^[-+]") ) {
      opts.tags[arg->sub(2)] = (arg->sub(1, 1) == "+");
    } else if( arg->find("^%d+$") ) {
      if( ! opts.numbers_to_run ) {
        opts.numbers_to_run = {};
      }
      opts.numbers_to_run[tonumber(arg)] = true;
    } else if( ! opts.root ) {
      opts.root = arg;
    } else {
      error("Unexpected argument ".. arg);
    }
  }
  return result;
}

var function scan_tests(path, opts) {
  if( path->sub(-4, -4) == "." ) {
    var f = assert(io_open(path, "rb"));
    var contents = f->read("*a");
    f->close();
    var prefix = "return {";
    var code =  contents->gsub("()({ +//%- +)([^\r\n]+)",
      function(pos, marker, info) {
        if( pos != 1 ) {
          --pos    ;
          if( contents->sub(pos, pos) != "\n" ) {
            return marker .. info;
          }
        }
        var result = ("%s%q,function(){")->format(prefix, info);
        prefix = ",";
        if( info->find(" !lex") && ! opts->want_meta(info->sub((info->find(" +[-+@!]")))) ) {
          result = result .."} /*=";
          prefix = "=*/".. prefix;
        }
        return result;
      });
    if( prefix->sub(-1) != "," ) {
      error("No tests found in ".. path);
    }
    prefix = prefix .."}";
    return assert(load(function() {
      var result = code;
      code = code != prefix && prefix || null;
      return result;
    }, "@".. path))();
  } else {
    if( path != "" && path->sub(-1) != "/" && path->sub(-1) != dirsep ) {
      path = path .. dirsep;
    }
    var result = {};
    var i = 1;
    for( line in io_lines(path .."index") ) {
      if( line != "" ) {
        var metaidx = line->find(" +[-+@]");
        var name = line;
        var want_these = true;
        if( metaidx ) {
          name = line->sub(1, metaidx - 1);
          want_these = opts->want_meta(line->sub(metaidx));
        }
        if( want_these ) {
          result[i] = line;
          result[i+1] = scan_tests(path .. name, opts);
          i +=   2;
        }
      }
    }
    return result;
  }
}

var function upvalue_iterator(f, i) {
  ++i    ;
  var name, val = debug.getupvalue(f, i);
  return name && i, name, val;
}

var function upvalues_of(f) {
  return upvalue_iterator, f, 0;
}

var function append_tree_to_plan(test_tree, opts, plan, prefix) {
  var prefi;
  for( i = 1, #test_tree, 2 ) {
    var info = test_tree[i];
    var name = info;
    var want_these = true;
    var metaidx = info->find(" +[-+@!]");
    if( metaidx ) {
      name = info->sub(1, metaidx - 1);
      want_these = opts->want_meta(info->sub(metaidx));
    }
    var planlen = #plan;
    if( want_these ) {
      var test = test_tree[i+1];
      if( type(test) == "table" ) {
        append_tree_to_plan(test, opts, plan, prefix .. name .. dirsep);
      } else {
        if( ! prefi ) {
          prefi = prefix->sub(1, -2);
        }
        plan[#plan+1] = {prefi, name, test};
      }
    }
    if( metaidx && info->find("!") ) {
      for( modifier in info->gmatch("!([^ ]+)") ) {
        if( modifier == "private_G" ) {
          var G = setmetatable({}, {__index = _G});
          G._G = G;
          var function Gfn() { return G; }
          for( xi = planlen+1, #plan ) {
            var test = plan[xi][3];
            if( setfenv ) {
              setfenv(test, G);
            } else {
              for( yi, xname in upvalues_of(test) ) {
                if( xname == "_ENV" ) {
                  debug.upvaluejoin(test, yi, Gfn, 1);
                  break;
                }
              }
            }
          }
        } else if( modifier == "lex" ) {
          // Handled during test scanning
        } else {
          error("Unsupported modifier \"".. modifier .."\" in ".. prefix);
        }
      }
    }
  }
  return plan;
}

var function seal_globals() {
  var sealed_mt = {__newindex = function() {
    error("Tests should not mutate global state", 3);
  }};
  var function seal(t) {
    if( getmetatable(t) ) { return; }
    setmetatable(t, sealed_mt);
    for( k, v in pairs(t) ) {
      if( type(v) == "table" ) { seal(v); }
    }
  }
  seal(_G);
  
  if( getmetatable(package.loaded) == sealed_mt ) {
    setmetatable(package.loaded, null);
  }
}

var function check_package_path() {
  var ok, res = pcall(require, "common.test_runner_canary");
  if( ! ok ) {
    if( own_dir ) {
      var _, psep, placeholder = package.config->match("^(.-)\n(.-)\n(.-)\n");
      package.path = package.path .. psep .. own_dir .. placeholder ..".ljs";
      ok, res = pcall(require, "common.test_runner_canary");
    }
    if( ! ok ) {
      error(res);
    }
  }
  assert(res == "canary is alive");
}

var function mutate_plan(plan, opts) {
  if( opts.shuffle ) {
    math.randomseed(opts.shuffle);
    for( i = #plan, 2, -1 ) {
      var n = math_random(1, i);
      plan[i], plan[n] = plan[n], plan[i];
    }
  }
  if( opts.shard ) {
    var shard_plan = {};
    for( i = opts.shard.initial, #plan, opts.shard.step ) {
      shard_plan[#shard_plan + 1] = plan[i];
    }
    plan = shard_plan;
  }
  if( opts.numbers_to_run ) {
    for( i = 1, #plan ) {
      if( ! opts.numbers_to_run[i] ) {
        plan[i][3] = false;
      }
    }
    for( k in pairs(opts.numbers_to_run) ) {
      if( ! plan[k] ) {
        error("Test number ".. k .." is not part of the plan");
      }
    }
  }
  return plan;
}

var function execute_plan(plan, opts) {
  if( #plan == 0 ) {
    error("No tests selected");
  }
  var progress_format = ("[%%%dd/%d] ")->format(#tostring(#plan), #plan);
  var num_tests_run = 0;
  var fail_numbers = {};
  for( i = 1, #plan ) {
    var plan_i = plan[i];
    var test = plan_i[3];
    if( test ) {
      var file, name = plan_i[1], plan_i[2];
      if( ! opts.quiet ) {
        io_write(progress_format->format(i), file);
        io_write(file == "" && "" || " --- ", name, "\n");
      }
      var ok, err = xpcall(test, debug_traceback);
      if( ! ok ) {
        if( opts.quiet ) {
          io_write(progress_format->format(i), file);
          io_write(file == "" && "" || " --- ", name, "\n");
        }
        fail_numbers[#fail_numbers + 1] = i;
        io_write(err, "\n");
      }
      ++num_tests_run    ;
    }
  }
  if( #fail_numbers == 0 ) {
    io_write(num_tests_run, " passed\n");
    return true;
  } else {
    io_write(num_tests_run - #fail_numbers, " passed, ");
    io_write(#fail_numbers, " failed\n");
    if( ! opts.quiet && num_tests_run != #fail_numbers ) {
      io_write("to run just failing tests, pass command line arguments: ");
      io_write(table.concat(fail_numbers, " "), "\n");
    }
    return false;
  }
}

var opts = parse_args({...});
if( ! opts ) {
  return;
}
seal_globals();
check_package_path();
var test_tree = scan_tests(opts.root || own_dir || "", opts);
var plan = append_tree_to_plan(test_tree, opts, {}, "");
plan = mutate_plan(plan, opts);
var all_good = execute_plan(plan, opts);
if( ! all_good ) {
  os.exit(1);
}
