// TODO: Organise

// ABC elim
// +opt +abc
{
  var s, t = {}, {};
  for( i=1,100 ) { t[i] = 1; }
  for( i=1,100 ) { s[i] = t; }
  s[90] = {};
  var n = 100;
  for( i=1,n ) { s[i][i] = i; }
}

//- TSETM
// Initialize table with multiple return values
{
  var function f(a,b,c) {
    return a,b,c;
  }

  var t;

  t = {(f(1,2,3))};
  assert(t[1] == 1 && t[2] == null && t[3] == null);

  t = {f(1,2,3)};
  assert(t[1] == 1 && t[2] == 2 && t[3] == 3 && t[4] == null);
  t = {f(1,2,3),};
  assert(t[1] == 1 && t[2] == 2 && t[3] == 3 && t[4] == null);

  t = {f(1,2,3), f(4,5,6)};
  assert(t[1] == 1 && t[2] == 4 && t[3] == 5 && t[4] == 6 && t[5] == null);

  t = {
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  f(2,3,4)};
  assert(t[255] == 1 && t[256] == 2 && t[257] == 3 && t[258] == 4 && t[259] == null);
}

//- TSETM 2
// Initialize table with function returning 2 constant return values
{
  var function f() { return 9, 10; }
  var t;
  for( i=1,100 ) { t = { 1, 2, 3, f() }; }
  assert(t[1] == 1 && t[2] == 2 && t[3] == 3 && t[4] == 9 && t[5] == 10 &&
	 t[6] == null);
}



