var bit = require("bit");
var byte, ipairs, tostring, pcall = string.byte, ipairs, tostring, pcall;

var vb = {
  0, 1, -1, 2, -2, 0x12345678, 0x87654321,
  0x33333333, 0x77777777, 0x55aa55aa, 0xaa55aa55,
  0x7fffffff, 0x80000000, 0xffffffff
};

var function cksum(name, s, r) {
  var z = 0;
  for( i=1,#s ) { z = (z + byte(s, i)*i) % 2147483629; }
  if( z != r ) {
    error("bit."..name.." test failed (got "..z..", expected "..r..")", 0);
  }
}

var function check_unop(name, r) {
  var f = bit[name];
  var s = "";
  if( pcall(f) || pcall(f, "z") || pcall(f, true) ) {
    error("bit."..name.." fails to detect argument errors", 0);
  }
  for( _,x in ipairs(vb) ) { s = s..","..tostring(f(x)); }
  cksum(name, s, r);
}

var function check_binop(name, r) {
  var f = bit[name];
  var s = "";
  if( pcall(f) || pcall(f, "z") || pcall(f, true) ) {
    error("bit."..name.." fails to detect argument errors", 0);
  }
  for( _,x in ipairs(vb) ) {
    for( _2,y in ipairs(vb) ) { s = s..","..tostring(f(x, y)); /*io.write(_, " ", _2, " ", x, " ", y, " ", f(x, y), "\n")*/ }
  }
  cksum(name, s, r);
}

var function check_binop_range(name, r, yb, ye) {
  var f = bit[name];
  var s = "";
  if( pcall(f) || pcall(f, "z") || pcall(f, true) || pcall(f, 1, true) ) {
    error("bit."..name.." fails to detect argument errors", 0);
  }
  for( _,x in ipairs(vb) ) {
    for( y=yb,ye ) { s = s..","..tostring(f(x, y)); }
  }
  cksum(name, s, r);
}

var function check_shift(name, r) {
  check_binop_range(name, r, 0, 31);
}

{ //- Minimal sanity checks.
  assert(0x7fffffff == 2147483647, "broken hex literals");
  assert(0xffffffff == -1 || 0xffffffff == 2**32-1, "broken hex literals");
  assert(tostring(-1) == "-1", "broken tostring()");
  assert(tostring(0xffffffff) == "-1" || tostring(0xffffffff) == "4294967295", "broken tostring()");
}

{ //- Basic argument processing.
  assert(bit.tobit(1) == 1);
  assert(bit.band(1) == 1);
  assert(bit.bxor(1,2) == 3);
  assert(bit.bor(1,2,4,8,16,32,64,128) == 255);
}

{ //- unop test vectors
  check_unop("tobit", 277312);
  check_unop("bnot", 287870);
  check_unop("bswap", 307611);
}

{ //- binop test vectors
  check_binop("band", 41206764);
  check_binop("bor", 51253663);
  check_binop("bxor", 79322427);
}

{ //- shift test vectors
  check_shift("lshift", 325260344);
  check_shift("rshift", 139061800);
  check_shift("arshift", 111364720);
  check_shift("rol", 302401155);
  check_shift("ror", 302316761);
}

{ //- tohex test vectors
  check_binop_range("tohex", 47880306, -8, 8);
}

{ //- Don't propagate TOBIT narrowing across two conversions.
  var tobit = bit.tobit;
  var k = 0x8000000000003;
  for( i=1,100 ) { assert(tobit(k % (2**32)) == 3); }
}
