
{ //- select #
// Test whether select("#", 3, 4) returns the correct number of arguments. 
  var x = 0;
  for( i=1,100 ) {
    x +=   select("#", 3, 4);
  }
  assert(x == 200);
}

{ //- select modf
// Test whether select("#", func()) also works with func returning multiple values
  var x = 0;
  math.frexp(3);
  for( i=1,100 ) {
    x +=   select("#", math.modf(i));
  }
  assert(x == 200);
}

{ //- select 1 
  var x = 0;
  for( i=1,100 ) {
    x +=   select(1, i);
  }
  assert(x == 5050);
}

{ //- select 2
  var x, y = 0, 0;
  for( i=1,100 ) {
    var a, b = select(2, 1, i, i+10);
    x +=   a;
    y +=   b;
  }
  assert(x == 5050 && y == 6050);
}

{ //- select vararg #
  var function f(a, ...) {
    var x = 0;
    for( i=1,select('#', ...) ) {
      x +=   select(i, ...);
    }
    assert(x == a);
  }
  for( i=1,100 ) {
    f(1, 1);
    f(3, 1, 2);
    f(15, 1, 2, 3, 4, 5);
    f(0);
    f(3200, string.byte(string.rep(" ", 100), 1, 100));
  }
}

{ //- select vararg i
  var function f(a, ...) {
    var x = 0;
    for( i=1,20 ) {
      var b = select(i, ...);
      if( b ) { x +=   b; } else { x +=   9; }
    }
    assert(x == a);
  }
  for( i=1,100 ) {
    f(172, 1);
    f(165, 1, 2);
    f(150, 1, 2, 3, 4, 5);
    f(180);
    f(640, string.byte(string.rep(" ", 100), 1, 100));
  }
}

{ //- select vararg 4
  var function f(a, ...) {
    var x = 0;
    for( i=1,20 ) {
      var b = select(4, ...);
      if( b ) { x +=   b; } else { x +=   9; }
    }
    assert(x == a);
  }
  for( i=1,100 ) {
    f(180, 1);
    f(180, 1, 2);
    f(80, 1, 2, 3, 4, 5);
    f(180);
    f(640, string.byte(string.rep(" ", 100), 1, 100));
  }
}

{ //- varg-select specialisation requires guard against select
  var select = select;
  var exptyp = "number";
  var function f(...) {
    for( i = 1, 100 ) {
      assert(type((select('#', ...))) == exptyp);
      if( i == 75 ) {
        select = function() { return ""; };
        exptyp = "string";
      }
    }
  }
  f(1);
}
