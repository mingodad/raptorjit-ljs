var ffi = require("ffi");

var u = ffi.new([=[
union {
  int8_t i8[8];
  uint8_t u8[8];
  int16_t i16[4];
  uint16_t u16[4];
  int32_t i32[2];
  uint32_t u32[2];
  int64_t i64[1];
  uint64_t u64[1];
  void *v[2];
  float f[2];
  double d[1];
}
]=]);

{ //- float -> u32 type punning at same offset
  var x = 0LL;
  for( i=1,100 ) {
    u.f[0] = i;
    x +=   u.u32[0];
  }
  assert(x == 110888222720LL);
}

{ //- double -> u64 type punning at same offset
  var x = 0LL;
  for( i=1,100 ) {
    u.d[0] = i;
    x +=   u.u64[0];
  }
  assert(x == 1886586031403171840ULL);
}

{ //- i8 -> u8 type punning at same offset (fwd -> CONV.int.u8)
  var x = 0;
  for( i=-100,100 ) {
    u.i8[0] = i;
    x +=   u.u8[0];
  }
  assert(x == 25600);
}

{ //- p32/p64 -> u64 type punning at same offset (32 bit: different size)
  var x = 0LL;
  u.u64[0] = 0;
  for( i=-100,150 ) {
    u.v[0] = ffi.cast("void *", ffi.cast("ptrdiff_t", i));
    x +=   u.u64[0];
  }
  assert(x == (ffi.abi("64bit") && 6275ULL ||
	       (ffi.abi("le") && 0x6400001883ULL || 0x188300000000ULL)));
}

{ //- u16 -> u8 type punning at overlapping offsets [0]
  var x = 0;
  for( i=255,520 ) {
    u.u16[0] = i;
    x +=   u.u8[0];
  }
  assert(x == (ffi.abi("be") && 274 || 32931));
}

{ //- u16 -> u8 type punning at overlapping offsets [1]
  var x = 0;
  for( i=255,520 ) {
    u.u16[0] = i;
    x +=   u.u8[1];
  }
  assert(x == (ffi.abi("le") && 274 || 32931));
}

{ //- i16 -> i32 type punning at overlapping offsets [0]
  var x = 0;
  u.i32[0] = 0;
  for( i=-100,150 ) {
    u.i16[0] = i;
    x +=   u.i32[0];
  }
  assert(x == (ffi.abi("be") && 411238400 || 6559875));
}

{ //- i16 -> i32 type punning at overlapping offsets [1]
  var x = 0;
  u.i32[0] = 0;
  for( i=-100,150 ) {
    u.i16[1] = i;
    x +=   u.i32[0];
  }
  assert(x == (ffi.abi("le") && 411238400 || 6559875));
}

{ //- double -> i32 type punning at overlapping offsets [0]
  var x = 0;
  for( i=1.5,120,1.1 ) {
    u.d[0] = i;
    x +=   u.i32[0];
  }
  assert(x == (ffi.abi("be") && 116468870297 || -858993573));
}

{ //- double -> i32 type punning at overlapping offsets [1]
  var x = 0;
  for( i=1.5,120,1.1 ) {
    u.d[0] = i;
    x +=   u.i32[1];
  }
  assert(x == (ffi.abi("le") && 116468870297 || -858993573));
}

{ //- u32 -> u64 type punning, constify u, 32 bit SPLIT: fold KPTR
  var xu = ffi.new("union { struct { uint32_t lo, hi; }; uint64_t u64; }");

  var function conv(lo, hi) {
    xu.lo = lo;
    xu.hi = hi;
    return xu.u64;
  }

  var x = 0ll;
  for( i=1,100 ) {
    x +=   conv(i, i);
  }
  assert(x == 21689584849850ULL);
}

{ //- u64 -> u32 -> u64 type punning with KPTR
  var s = ffi.new("union { int64_t q; int32_t i[2]; }");
  var function f() {
    s.q = 0;
    s.i[1] = 1;
    return s.q;
  }
  for( i=1,50 ) { f(); f(); f(); }
  assert(f() != 0);
}
