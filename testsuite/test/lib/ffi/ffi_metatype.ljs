var ffi = require("ffi");

dofile("../common/ffi_util.inc");

ffi.cdef([=[
typedef struct { int x; } idx1_t;
typedef struct { int x; } idx2_t;
typedef struct { int x; } idx3_t;
typedef struct { int x,y; } arith_t;
typedef struct { void *p; } gc_t;
]=]);

var function ptreq(a, b) {
  return ffi.cast("void *", a) == ffi.cast("void *", b);
}

{
  var nidx = {};
  var tp = ffi.metatype("idx1_t", {
    __index = { foo = 99, method = function(c, v) { return v; } },
    __newindex = nidx,
  });

  fails(function() { ffi.metatype("idx1_t", {}); });

  var s = tp(1234);
  assert(s.foo == 99);
  assert(s.x == 1234);
  // bad field in __index metatable
  fails(function(s) { var x = s.bar; }, s);
  assert(s->method(123) == 123);
  s.bar = 42;
  assert(nidx.bar == 42);

  var cs = ffi.new("const idx1_t", 9876);
  assert(cs.foo == 99);
  assert(cs.x == 9876);
  // write to const struct
  fails(function(cs) { cs.bar = 42; }, cs);

  var cp = ffi.new("const idx1_t *", cs);
  assert(cp.foo == 99);
  assert(cp.x == 9876);
  // write to const struct pointer
  fails(function(cp) { cp.bar = 42; }, cp);
}

{
  var uc, uk, uv;
  var tp = ffi.metatype("idx2_t", {
    __index = function(c, k, x, y) {
       assert(x == null && y == null);
       uc, uk = c, k; return 99;
    },
    __newindex = function(c, k, v) { uc, uk, uv = c, k, v; },
  });

  var s = tp(1234);
  assert(s.foo == 99);
  assert(ptreq(uc, s) && uk == "foo" && uv == null); uc,uk,uv=null,null,null;
  assert(s.x == 1234);
  assert(uc == null && uk == null && uv == null); uc,uk,uv=null,null,null;

  s.bar = 42;
  assert(ptreq(uc, s) && uk == "bar" && uv == 42); uc,uk,uv=null,null,null;
  s[10] = 11;
  assert(ptreq(uc, s) && uk == 10 && uv == 11); uc,uk,uv=null,null,null;

  var p = ffi.new("idx2_t *", s);
  assert(p.foo == 99);
  assert(ptreq(uc, p) && uk == "foo" && uv == null); uc,uk,uv=null,null,null;
  assert(p.x == 1234);
  assert(uc == null && uk == null && uv == null); uc,uk,uv=null,null,null;
  // pointer dereference has precedence
  assert(ptreq(p[0], p));
  assert(uc == null && uk == null && uv == null); uc,uk,uv=null,null,null;
  // pointer dereference has precedence
  fails(function(p) { p[0] = 11; }, p);
}

{
  var uc, uk, uv;
  var ti, tn = {}, {};
  var tp = ffi.metatype("idx3_t", {
    __index = setmetatable(ti,
      { __index = function(c, k) { uc, uk = c, k; return 99; } }),
    __newindex = setmetatable(tn,
      { __newindex = function(c, k, v) { uc, uk, uv = c, k, v; } }),
  });

  var s = tp(1234);
  assert(s.foo == 99);
  assert(uc == ti && uk == "foo" && uv == null);
  uc, uk, uv = null, null, null;
  assert(s.x == 1234);
  assert(uc == null && uk == null && uv == null);

  s.bar = 42;
  assert(uc == tn && uk == "bar" && uv == 42);
  uc, uk, uv = null, null, null;
  s[10] = 11;
  assert(uc == tn && uk == 10 && uv == 11);
  uc, uk, uv = null, null, null;
}

{
  var tp;
  tp = ffi.metatype("arith_t", {
    __add = function(a, b) { return tp(a.x+b.x, a.y+b.y); },
    __sub = function(a, b) { return tp(a.x-b.x, a.y-b.y); },
    __mul = function(a, z) { return tp(a.x*z, a.y*z); },
    __div = function(z, a) { return tp(a.x*z, a.y*z); },
    __concat = setmetatable({}, { __call = function(x) { return 99; } }),
    __len = function(x) { return 2; },
    __call = function(a) { return a.x+a.y; },
    __tostring = function(a) { return "foo"; },
    __newindex = function(a, k, v) { a.y = v; },
    __index = {
      diff = function(a) { return a.x-a.y; },
    },
  });

  var a = tp(10, 20);
  var b = tp(1, 2);
  var c = a + b;
  assert(c.x == 11 && c.y == 22);
  assert(c->diff() == -11);
  assert(c() == 33);
  var d = a - b;
  assert(d.x == 9 && d.y == 18);
  assert(d->diff() == -9);
  assert(d() == 27);
  var e = a * 3;
  assert(e.x == 30 && e.y == 60);
  var f = 3LL / a;
  assert(f.x == 30 && f.y == 60);
  assert(1 .. c == 99);
  assert(c .. 1 == 99);
  assert(c .. d == 99);
  assert(tostring(c) == "foo");
  assert(tostring(ffi.cast("arith_t *", c)) == "foo");
  c.foo = 42;
  assert(c.y == 42);

  var p = ffi.new("arith_t *", a);
  var g1 = p + p;
  assert(g1.x == 20 && g1.y == 40);
  var g2 = p[0] + p[0];
  assert(g2.x == 20 && g2.y == 40);
  assert(p() == 30);

  var q = ffi.new("arith_t &", a);
  fails(function(p) { var y = q[0] + q[0]; }, q);
  var h = q + q;
  assert(h.x == 20 && h.y == 40);

  var diff = 0;
  for( i=1,100 ) { diff = a->diff(); }
  assert(diff == -10);

  for( i=1,100 ) { c.foo = i; }
  assert(c.y == 100);

  var z = tp(1, 3);
  for( i=1,100 ) { z +=   a; }
  assert(z.x == 1001 && z.y == 2003);

  var x = 0;
  for( i=1,100 ) { x +=   #a; }
  assert(x == 200);

  x = 0;
  for( i=1,100 ) { x +=   p(); }
  assert(x == 3000);
}

{
  var count = 0;
  var tp = ffi.metatype("gc_t", {
    __gc = function(x) { ++count    ; },
  });

  var a = tp();
  a = null;
  collectgarbage();
  assert(count == 1);
  var b,c = tp(), tp();
  b = null;
  collectgarbage();
  assert(count == 2);
  c = null;
  collectgarbage();
  assert(count == 3);

  var z;
  for( i=1,100 ) { z = tp(); }
  z = null;
  collectgarbage();
  assert(count == 103);

  var t = {};
  for( i=1,100 ) { t[i] = tp(); }
  for( i=1,100 ) { ffi.gc(t[i], null); }
  t = null;
  collectgarbage();
  assert(count == 103);
}

{
  var tp = ffi.metatype([=[
struct {
  static const int Z42 = 42;
  enum { Z39 = 39 };
  int x;
}]=], {
    __new = function(tp, x) {
      return ffi.new(tp, x || -1);
    },
    __index = { test = function(x) { return x+1; }, x = "hello" }
  });
  assert(tp.Z42 == 42);
  assert(tp.Z39 == 39);
  assert(tp.test(99) == 100);
  fails(function() { tp.Z42 = 1; });
  fails(function() { tp.Z39 = 1; });
  assert(tp.x == "hello"); // Not sure this is a good idea to allow that.
  fails(function() { tp.x = 1; });
  var o = tp();
  assert(o.Z42 == 42);
  assert(o.Z39 == 39);
  assert(o.test(55) == 56);
  fails(function() { o.Z42 = 1; });
  fails(function() { o.Z39 = 1; });
  assert(o.x == -1);
  o.x = 5;
  assert(o.x == 5);
}

{
  var fb = ffi.new("struct { int x; }", 99);
  var xt = ffi.metatype("struct { }", { __index = fb });
  var o = xt();
  assert(o.x == 99);
}

