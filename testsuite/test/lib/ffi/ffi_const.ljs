var ffi = require("ffi");

dofile("../common/ffi_util.inc");

ffi.cdef([=[
typedef struct s_t {
  int v, w;
} s_t;

typedef const s_t cs_t;

typedef enum en_t { EE } en_t;

typedef struct pcs_t {
  int v;
  const int w;
} pcs_t;

typedef struct foo_t {
  static const int cc = 17;
  enum { CC = -37 };
  int i;
  const int ci;
  int bi:8;
  const int cbi:8;
  en_t e;
  const en_t ce;
  int a[10];
  const int ca[10];
  const char cac[10];
  s_t s;
  cs_t cs;
  pcs_t pcs1, pcs2;
  const struct {
    int ni;
  };
  complex cx;
  const complex ccx;
  complex *cp;
  const complex *ccp;
} foo_t;
]=]);

{
  var foo_t = ffi.typeof("foo_t");
  var x = foo_t();

  // constval
  assert(x.cc == 17);
  fails(function(x) { x.cc = 1; }, x);
  assert(x.CC == -37);
  fails(function(x) { x.CC = 1; }, x);

  // fields
  x.i = 1;
  fails(function(x) { x.ci = 1; }, x);
  x.e = 1;
  fails(function(x) { x.ce = 1; }, x);

  // bitfields
  x.bi = 1;
  fails(function(x) { x.cbi = 1; }, x);

  // arrays
  {
    var a = ffi.new("int[10]");
    a[0] = 1;
    var ca = ffi.new("const int[10]");
    fails(function(ca) { ca[0] = 1; }, ca);
  }
  x.a[0] = 1;
  fails(function(x) { x.ca[0] = 1; }, x);
  fails(function(x) { x.a = x.ca; }, x); // incompatible type
  fails(function(x) { x.ca = x.a; }, x);
  fails(function(x) { x.ca = {}; }, x);
  fails(function(x) { x.cac = "abc"; }, x);

  // structs
  {
    var s = ffi.new("s_t");
    s.v = 1;
    var cs = ffi.new("cs_t");
    fails(function(cs) { cs.v = 1; }, cs);
  }
  x.s.v = 1;
  fails(function(x) { x.cs.v = 1; }, x);
  x.s = x.cs;
  fails(function(x) { x.cs = x.s; }, x);
  fails(function(x) { x.cs = {}; }, x);

  // pseudo-const structs
  x.pcs1.v = 1;
  fails(function(x) { x.pcs1.w = 1; }, x);
  fails(function(x) { x.pcs1 = x.pcs2; }, x);
  fails(function(x) { x.pcs1 = {}; }, x);

  // transparent structs
  var y = x.ni;
  fails(function(x) { x.ni = 1; }, x);

  // complex subtype is implicitly const and doesn't inherit const attribute
  x.cx = 1;
  fails(function(x) { x.ccx = 1; }, x);
  {
    var cxa = ffi.new("complex[1]");
    var ccxa = ffi.new("const complex[1]");
    x.cp = cxa;
    x.ccp = cxa;
    fails(function(x) { x.cp = ccxa; }, x);
    x.ccp = ccxa;
  }
}

