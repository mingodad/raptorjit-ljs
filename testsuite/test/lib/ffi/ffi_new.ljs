var ffi = require("ffi");
var bit = require("bit");

dofile("../common/ffi_util.inc");

ffi.cdef([=[
typedef struct { int a,b,c; } foo1_t;
typedef int foo2_t[?];
void *malloc(size_t size);
void free(void *ptr);
]=]);

{
  assert(ffi.sizeof("foo1_t") == 12);
  var cd = ffi.new("foo1_t");
  assert(ffi.sizeof(cd) == 12);
  var foo1_t = ffi.typeof("foo1_t");
  assert(ffi.sizeof(foo1_t) == 12);
  cd = foo1_t();
  assert(ffi.sizeof(cd) == 12);
}

{
  assert(ffi.sizeof("foo2_t", 3) == 12);
  var cd = ffi.new("foo2_t", 3);
  assert(ffi.sizeof(cd) == 12);
  var foo2_t = ffi.typeof("foo2_t");
  fails(ffi.sizeof, foo2_t);
  assert(ffi.sizeof(foo2_t, 3) == 12);
  cd = foo2_t(3);
  assert(ffi.sizeof(cd) == 12);
}

{
  var tpi = ffi.typeof("int");
  var tpb = ffi.typeof("uint8_t");
  var t = {};
  for( i=1,200 ) { t[i] = tpi; }
  t[100] = tpb;
  var x = 0;
  for( i=1,200 ) { x +=   tonumber(ffi.new(t[i], 257)); }
  assert(x == 199*257 + 1);
}

{
  var oc = collectgarbage("count");
  for( al=0,15 ) {
    var align = 2**al; // 1, 2, 4, ..., 32768
    var ct = ffi.typeof("struct { char __attribute__((aligned("..align.."))) a; }");
    for( i=1,100 ) {
      var cd = ct();
      var addr = tonumber(ffi.cast("intptr_t", ffi.cast("void *", cd)));
      assert(bit.band(addr, align-1) == 0);
    }
  }
  var nc = collectgarbage("count");
  assert(nc < oc + 3000, "GC step missing for ffi.new");
}

{
  var t = {};
  for( i=1,100 ) { t[i] = ffi.new("int[?]", i); }
  assert(ffi.sizeof(t[100]) == 400);
  for( i=0,99 ) { assert(t[100][i] == 0); }
}

{
  var t = {};
  var ct = ffi.typeof("struct { double x; int y[?];}");
  for( i=1,100 ) { t[i] = ct(i); }
  assert(ffi.sizeof(t[100]) == 408);
  for( i=0,99 ) { assert(t[100].y[i] == 0); }
}

{
  var ct = ffi.typeof("struct __attribute__((aligned(16))) { int x; }");
  var y;
  for( i=1,200 ) {
    var x = ct();
    if( i == 150 ) { y = x; }
  }
  assert(bit.band(ffi.cast("intptr_t", ffi.cast("void *", y)), 15) == 0);
}

{
  var q;
  var p = ffi.gc(ffi.new("int[1]"), function(x) { q = x; });
  p = null;
  collectgarbage();
  assert(type(q) == "cdata");
  q = null;
  collectgarbage();
  assert(q == null);
}

{
  var p = ffi.gc(ffi.C.malloc(2**20), ffi.C.free);
  p = null;
  collectgarbage();
}

{
  var p = ffi.gc(ffi.new("int[1]"), function(x) { assert(type(x) == "cdata"); });
  // test for lua_close() cleanup.
}

