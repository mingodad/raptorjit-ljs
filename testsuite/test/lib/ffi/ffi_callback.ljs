
var ffi = require("ffi");

ffi.cdef([=[
void qsort(void *base, size_t nmemb, size_t size,
	   int (*compar)(const uint8_t *, const uint8_t *));
]=]);

{
  var cb = ffi.cast("int (*)(int, int, int)", function(a, b, c) {
    return a+b+c;
  });

  assert(cb(10, 99, 13) == 122);

  // Don't compile call to blacklisted function.
  for( i=1,200 ) {
    if( i > 60 ) { assert(cb(10, 99, 13) == 122); }
  }
}

{
  assert(ffi.cast("int64_t (*)(int64_t, int64_t, int64_t)", function(a, b, c) {
      return a+b+c;
    })(12345678901234567LL, 70000000000000001LL, 10000000909090904LL) ==
    12345678901234567LL+70000000000000001LL+10000000909090904LL);

  assert(ffi.cast("double (*)(double, float, double)", function(a, b, c) {
      return a+b+c;
    })(7.125, -123.25, 9999.33) == 7.125-123.25+9999.33);

  assert(ffi.cast("double (*)(int, double)", function(a, b) {
      return a+b;
    })(12345, 7.125) == 12345 + 7.125);

  assert(ffi.cast("float (*)(double, float, double)", function(a, b, c) {
      return a+b+c;
    })(7.125, -123.25, 9999.33) == 9883.205078125);

  assert(ffi.cast("int (*)(int, int, int, int, int, int, int, int, int, int)",
    function(a, b, c, d, e, f, g, h, i, j) {
      return a+b+c+d+e+f+g+h+i+j;
    })(-42, 17, 12345, 9987, -100, 11, 51, 0x12345678, 338, -78901234) ==
    -42+17+12345+9987-100+11+51+0x12345678+338-78901234);

  assert(ffi.cast("double (*)(double, double, double, double, double, double, double, double, double, double)",
    function(a, b, c, d, e, f, g, h, i, j) {
      return a+b+c+d+e+f+g+h+i+j;
    })(-42.5, 17.125, 12345.5, 9987, -100.625, 11, 51, 0x12345678, 338, -78901234.75) ==
    -42.5+17.125+12345.5+9987-100.625+11+51+0x12345678+338-78901234.75);
}

// Target-specific tests.
if( jit.arch == "x86" ) {
  assert(ffi.cast("__fastcall int (*)(int, int, int)", function(a, b, c) {
      return a+b+c;
    })(10, 99, 13) == 122);

  assert(ffi.cast("__stdcall int (*)(int, int, int)", function(a, b, c) {
      return a+b+c;
    })(10, 99, 13) == 122);

  // Test reordering.
  assert(ffi.cast("int64_t __fastcall (*)(int64_t, int, int)", function(a, b, c) {
      return a+b+c;
    })(12345678901234567LL, 12345, 989797123) ==
    12345678901234567LL+12345+989797123);
}

// Error handling.
{
  var function f() {
    return;
  } // Error for result conversion triggered here.
  var ok, err = pcall(ffi.cast("int (*)(void)", f));
  assert(ok == false);
  assert(string.match(err, ":"..debug.getinfo(f, "S").lastlinedefined..":"));

  assert(pcall(ffi.cast("int (*)(void)", function() { })) == false);
  assert(pcall(ffi.cast("int (*)(void)", function() { error("test"); })) == false);
  assert(pcall(ffi.cast("int (*)(void)", function(a) { return a+1; })) == false);

  assert(pcall(ffi.cast("int (*)(int,int,int,int, int,int,int,int, int)", function() { error("test"); }), 1,1,1,1, 1,1,1,1, 1) == false);
  assert(pcall(ffi.cast("int (*)(int,int,int,int, int,int,int,int, int)", function() { error("test"); }), 1,1,1,1, 1,1,1,1, 1) == false);
}

{
  var function cmp(pa, pb) {
    var a, b = pa[0], pb[0];
    if( a < b ) {
      return -1;
    } else if( a > b ) {
      return 1;
    } else {
      return 0;
    }
  }

  var arr = ffi.new("uint8_t[?]", 256);
  for( i=0,255 ) { arr[i] = math.random(0, 255); }
  ffi.C.qsort(arr, 256, 1, cmp);
  for( i=0,254 ) { assert(arr[i] <= arr[i+1]); }
}

if( ffi.abi("win") ) {
  ffi.cdef([=[
  typedef int (__stdcall *WNDENUMPROC)(void *hwnd, intptr_t l);
  int EnumWindows(WNDENUMPROC func, intptr_t l);
  int SendMessageA(void *hwnd, uint32_t msg, int w, intptr_t l);
  enum { WM_GETTEXT = 13 };
  ]=]);

  var C = ffi.C;
  var buf = ffi.new("char[?]", 256);
  var lbuf = ffi.cast("intptr_t", buf);
  var count = 0;
  C.EnumWindows(function(hwnd, l) {
    if( C.SendMessageA(hwnd, C.WM_GETTEXT, 255, lbuf) != 0 ) {
      ++count    ;
    }
    return true;
  }, 0);
  assert(count > 10);
}

{
  var cb = ffi.cast("int(*)(void)", function() { return 1; });
  assert(cb() == 1);
  cb->free();
  assert(pcall(cb) == false);
  assert(pcall(cb.free, cb) == false);
  assert(pcall(cb.set, cb, function() { }) == false);
  cb = ffi.cast("int(*)(void)", function() { return 2; });
  assert(cb() == 2);
  cb->set(function() { return 3; });
  assert(cb() == 3);
}

{
  var ft = ffi.typeof("void(*)(void)");
  var function f() { }
  var t = {};
  for( i=1,4 ) {
    for( xi=1,400 ) { t[xi] = ft(f); }
    for( xi=1,400 ) { t[xi]->free(); }
  }
}

{
  assert(ffi.cast("int (*)()", function() { return string.byte("A"); })() == 65);
}

{
  var f = ffi.cast("void (*)(void)", function() { debug.traceback(); });
  debug.sethook(function() { debug.sethook(null, "", 0); f(); }, "", 1);
  var x;
}

