var ffi = require("ffi");

dofile("../common/ffi_util.inc");

{
  var x = ffi.new([=[
    union {
      uint32_t u;
      struct { int a:10,b:10,c:11,d:1; };
      struct { unsigned int e:10,f:10,g:11,h:1; };
      struct { int8_t i:4,j:5,k:5,l:3; };
      struct { _Bool b0:1,b1:1,b2:1,b3:1; };
    }
  ]=]);

  // bitfield access
  x.u = 0xffffffff;
  assert(x.a == -1 && x.b == -1 && x.c == -1 && x.d == -1);
  assert(x.e == 1023 && x.f == 1023 && x.g == 2047 && x.h == 1);
  assert(x.i == -1 && x.j == -1 && x.k == -1 && x.l == -1);
  assert(x.b0 == true && x.b1 == true && x.b2 == true && x.b3 == true);
  x.u = 0x12345678;
  if( ffi.abi("le") ) {
    assert(x.a == -392 && x.b == 277 && x.c == 291 && x.d == 0);
    assert(x.e == 632 && x.f == 277 && x.g == 291 && x.h == 0);
    assert(x.i == -8 && x.j == -10 && x.k == -12 && x.l == 1);
    assert(x.b0 == false && x.b1 == false && x.b2 == false && x.b3 == true);
  } else {
    assert(x.a == 72 && x.b == -187 && x.c == 828 && x.d == 0);
    assert(x.e == 72 && x.f == 837 && x.g == 828 && x.h == 0);
    assert(x.i == 1 && x.j == 6 && x.k == 10 && x.l == -2);
    assert(x.b0 == false && x.b1 == false && x.b2 == false && x.b3 == true);
  }
  x.u = 0xe8d30edc;
  if( ffi.abi("le") ) {
    assert(x.a == -292 && x.b == 195 && x.c == -371 && x.d == -1);
    assert(x.e == 732 && x.f == 195 && x.g == 1677 && x.h == 1);
    assert(x.i == -4 && x.j == 14 && x.k == -13 && x.l == -2);
    assert(x.b0 == false && x.b1 == false && x.b2 == true && x.b3 == true);
  } else {
    assert(x.a == -93 && x.b == 304 && x.c == -146 && x.d == 0);
    assert(x.e == 931 && x.f == 304 && x.g == 1902 && x.h == 0);
    assert(x.i == -2 && x.j == -6 && x.k == 1 && x.l == -2);
    assert(x.b0 == true && x.b1 == true && x.b2 == true && x.b3 == false);
  }

  // bitfield insert
  x.u = 0xffffffff;
  x.a = 0;
  if( ffi.abi("le") ) {
    assert(x.u == 0xfffffc00);
  } else {
    assert(x.u == 0x003fffff);
  }
  x.u = 0;
  x.a = -1;
  if( ffi.abi("le") ) {
    assert(x.u == 0x3ff);
  } else {
    assert(x.u == 0xffc00000);
  }
  x.u = 0xffffffff;
  x.b = 0;
  if( ffi.abi("le") ) {
    assert(x.u == 0xfff003ff);
  } else {
    assert(x.u == 0xffc00fff);
  }
  x.u = 0;
  x.b = -1;
  if( ffi.abi("le") ) {
    assert(x.u == 0x000ffc00);
  } else {
    assert(x.u == 0x003ff000);
  }

  // cumulative bitfield insert
  x.u = 0xffffffff;
  if( ffi.abi("le") ) {
    x.a = -392; x.b = 277; x.c = 291; x.d = 0;
  } else {
    x.a = 72; x.b = -187; x.c = 828; x.d = 0;
  }
  assert(x.u == 0x12345678);
  x.u = 0;
  if( ffi.abi("le") ) {
    x.a = -392; x.b = 277; x.c = 291; x.d = 0;
  } else {
    x.a = 72; x.b = -187; x.c = 828; x.d = 0;
  }
  assert(x.u == 0x12345678);
  x.u = 0xffffffff;
  x.b0 = true; x.b1 = false; x.b2 = true; x.b3 = false;
  if( ffi.abi("le") ) {
    assert(x.u == 0xfffffff5);
  } else {
    assert(x.u == 0xafffffff);
  }
  x.u = 0;
  x.b0 = true; x.b1 = false; x.b2 = true; x.b3 = false;
  if( ffi.abi("le") ) {
    assert(x.u == 0x00000005);
  } else {
    assert(x.u == 0xa0000000);
  }

}

