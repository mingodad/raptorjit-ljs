var ffi = require("ffi");

{ //- errno
  ffi.errno(42);
  var x = 0;
  for( i=1,100 ) { x +=   ffi.errno(); }
  assert(x == 4200);
  ffi.errno(0);
}

{ //- string
  var a = ffi.new("uint8_t[?]", 101);
  for( i=0,99 ) { a[i] = i; }
  var s;
  for( i=1,90 ) { s = ffi.string(a+i, 10); }
  assert(s == "Z[\\]^_`abc");
  for( i=1,90 ) { s = ffi.string(a+i); }
  assert(s == "Z[\\]^_`abc");
}

{ //- fill
  var a = ffi.new("uint8_t[?]", 100);
  var x = 0;
  for( i=0,90 ) { x +=   a[i]; ffi.fill(a+i, 10, i); x +=   a[i]; }
  assert(x == 8100);
  for( i=1,100 ) { ffi.fill(a, 15, 0x1234); }
  assert(a[0] == 0x34 && a[14] == 0x34 && a[15] == 15);
  var b = ffi.new("uint32_t[?]", 104);
  for( i=0,100 ) { ffi.fill(b+i, 15, 0x1234); }
  assert(b[0] == 0x34343434);
  assert(b[103] == (ffi.abi("le") && 0x343434 || 0x34343400));
}

{ //- copy array elements
  var a = ffi.new("uint8_t[?]", 100);
  var b = ffi.new("uint8_t[?]", 100);
  for( i=0,99 ) { b[i] = i; }
  var x = 0;
  for( i=0,90 ) { x +=   a[i]; ffi.copy(a+i, b+i, 1); x +=   a[i]; }
  assert(x == 4095);
  x = 0;
  for( i=0,90 ) { ffi.copy(b+i, a+90-i, 10); x +=   b[i]; }
  assert(x == 4095);
}

{ //- copy from string
  var a = ffi.new("uint8_t[?]", 100, 42);
  for( i=0,90 ) { ffi.copy(a+i, "abc"); }
  var x = 0;
  for( i=0,99 ) { x +=   a[i]; }
  assert(x == 9276);
}

{ //- copy structures
  var tp = ffi.typeof("struct { int x, y; }");
  var a = tp(1, 2);
  var b = tp(3, 4);
  var x = 0;
  for( i=1,100 ) { a.y = i; ffi.copy(b, a, 8); x +=   b.y; }
  assert(x == 5050);
  x = 0;
  for( i=1,100 ) { a.y = i; var t = tp(a); x +=   t.y; }
  assert(x == 5050);
}

{ //- init struct from first field, complex
  var tp = ffi.typeof("struct { complex x, y; }");
  var cx = ffi.typeof("complex");
  var a = tp(cx(1, 2), cx(3, 4));
  var x = 0;
  for( i=1,100 ) { a.y = i; var t = tp(a); x +=   t.y.re; }
  assert(x == 5050);
}

{ //- int array as parameterised type
  var tp = ffi.typeof("int[10]");
  var a = tp(42);
  var b = ffi.new(ffi.typeof("struct { $ x; }", tp));
  for( i=1,100 ) { b.x = a; }
  assert(b.x[0] == 42 && b.x[9] == 42);
}

{ //- double array as parameterised type
  var tp = ffi.typeof("double[5]");
  var a = tp(42);
  var b = ffi.new(ffi.typeof("struct { $ x; }", tp));
  for( i=1,100 ) { b.x = a; }
  assert(b.x[0] == 42 && b.x[4] == 42);
  b.x[0] = 0;
  for( i=1,100 ) { ffi.copy(b.x, a, ffi.sizeof(a)); }
  assert(b.x[0] == 42 && b.x[4] == 42);
}

{ //- abi
  var x, y;
  for( i=1,100 ) { x = ffi.abi("32bit"); y = ffi.abi("64bit"); }
  assert(x == ffi.abi("32bit"));
  assert(y == ffi.abi("64bit"));
  for( _,s in ipairs({"64bit", "32bit", "fpu", "softfp", "hardfp", "eabi", "win", "le", "be"}) ) {
    for( i=1,100 ) { x = ffi.abi(s); }
    assert(x == ffi.abi(s));
  }
}

{ //- typeof constructed typeof
  var ct = ffi.typeof("struct { int x; }");
  var cd = ct();
  for( i=1,100 ) { assert(ffi.typeof(cd) == ct); }
}
