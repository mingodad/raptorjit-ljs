var ffi = require("ffi");

{ //- smoke
  var types = {
    "int8_t", "uint8_t",
    "int16_t", "uint16_t",
    "int32_t", "uint32_t",
    "int64_t", "uint64_t",
    "float", "double",
  };
  for( j,tp in ipairs(types) ) {
    var t = ffi.new(tp.."[?]", 301);
    for( i=1,300 ) { t[i] = 1; }
    for( i=1,300 ) { assert(t[i] == 1); }
    for( i=1,300 ) { t[i] = t[i-1]; } // reassoc across PHIs, a[i-1] forwarding
    for( i=1,300 ) { assert(t[i] == 0); }
    for( i=1,300 ) { t[i] = i; }
    var x = 0;
    for( i=1,300 ) { x +=   t[i]; }
    if( tp == "int8_t" ) { assert(x == 862);
    } else if( tp == "uint8_t" ) { assert(x == 33630);
    } else { assert(x == 45150); }
  }
}

{ //- int array pointer arithmetic
  var a = ffi.new("int[?]", 101);
  var p = a+1;
  for( i=1,100 ) {
    p[0] = i;
    assert(p - a == i); // pointer difference
    ++p; // pointer increment by 4 bytes
  }
  for( i=1,100 ) { assert(a[i] == i); }
  for( i=1,100 ) { assert((a+i)[0] == i); } // pointer arithmetic
  for( i=1,100 ) { assert((i+a)[0] == i); } // pointer arithmetic
}

{ //- double array pointer arithmetic
  var a = ffi.new("double[?]", 101);
  var p = a+1;
  for( i=1,100 ) {
    p[0] = i;
    ++p; // pointer increment by 8 bytes
  }
  for( i=1,100 ) { assert(a[i] == i); }
  for( i=1,100 ) { assert((a+i)[0] == i); } // pointer arithmetic
}

{ //- double array pointer comparisons +bit
  var a = ffi.new("double[?]", 201);
  var p = a+3;
  for( i=1,200 ) { var j = bit.band(i, 7); assert((a+j == p) == (j == 3)); }
  p = a+100;
  for( i=1,200 ) { assert((a+i < p) == (i < 100)); }
  for( i=1,200 ) { assert((a+i <= p) == (i <= 100)); }
}

{ //- constant offset in double array index
  var a = ffi.new("double[?]", 100);
  for( i=1,100 ) { a[i-1LL] = i; }
  for( i=1,100 ) { assert(a[100LL-i] == 101-i); }
}

{ //- fixed index of minus one
  var a = ffi.new("int[10]");
  var p = a+1;
  var k = ffi.new("int", -1);
  a[0] = 42;
  for( i=1,100 ) { assert(p[-1] == 42); assert(p[k] == 42); }
}

{ //- uint8_t array element comparisons
  var a = ffi.new("uint8_t[?]", 256);
  for( i=0,255 ) { a[i] = i; }
  for( i=1,255 ) { assert(a[i] >= 1); }
  for( i=0,254 ) { assert(a[i] <= 254); }
}

{ //- int32_t array bit/bswap tricks +bit
  var a = ffi.new("int32_t[?]", 256);
  var tobit, bswap, shl = bit.tobit, bit.bswap, bit.lshift;
  for( i=0,255 ) { a[i] = bswap(i+0x12345600); }
  for( i=0,255 ) { assert(a[i] == tobit(shl(i, 24)+0x00563412)); }
  for( i=0,255 ) { assert(bswap(a[i]) == tobit(i+0x12345600)); }
}

{ //- int32_t shift/rotate/and +bit
  var a = ffi.new("int32_t[?]", 256);
  var shl, shr, rol, band = bit.lshift, bit.rshift, bit.rol, bit.band;
  for( i=0,255 ) { a[i] = i + shl(i, 8) + shl(i, 16); }

  for( i=0,255 ) { assert(shl(band(a[i], 0xff), 8) == shl(i, 8)); }
  for( i=0,255 ) { assert(band(shl(a[i], 8), 0xff00) == shl(i, 8)); }

  for( i=0,255 ) { assert(shr(band(a[i], 0xff00), 8) == i); }
  for( i=0,255 ) { assert(band(shr(a[i], 8), 255) == i); }

  for( i=0,255 ) { assert(rol(band(a[i], 0xff), 8) == shl(i, 8)); }
  for( i=0,255 ) { assert(band(rol(a[i], 8), 0xff00) == shl(i, 8)); }

  for( i=0,255 ) { assert(shl(band(a[i], 0x000000ff), 24) == shl(i, 24)); }
  for( i=0,255 ) { assert(shr(band(a[i], 0xffff0000), 16) == i); }
}
