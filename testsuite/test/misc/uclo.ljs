
var function test_for() {
  var z1, z2;
  for( i=1,10 ) {
    var function f() { return i; }
    if( z1 ) { z2 = f; } else { z1 = f; }
  }
  assert(z1() == 1);
  assert(z2() == 10);
}

var function test_while() {
  var z1, z2;
  var i = 1;
  while( i <= 10 ) {
    var j = i;
    var function f() { return j; }
    if( z1 ) { z2 = f; } else { z1 = f; }
    ++i    ;
  }
  assert(z1() == 1);
  assert(z2() == 10);
}

var function test_repeat() {
  var z1, z2;
  var i = 1;
  do {
    var j = i;
    var function f() { return j; }
    if( z1 ) { z2 = f; } else { z1 = f; }
    ++i    ;
  } while(!( i > 10) );
  assert(z1() == 1);
  assert(z2() == 10);
}

var function test_func() {
  var function ff(x) {
    return function() { return x; };
  }
  var z1, z2;
  for( i=1,10 ) {
    var f = ff(i);
    if( z1 ) { z2 = f; } else { z1 = f; }
  }
  assert(z1() == 1);
  assert(z2() == 10);
}

test_for();
test_while();
test_repeat();
test_func();

{
  var function f1(a) {
    if( a > 0 ) {
      var b = f1(a - 1);
      return function() {
	if( type(b) == "function" ) {
	  return a + b();
	}
	return a + b;
      };
    }
    return a;
  }

  var function f2(a) {
    return f1(a)();
  }

  for( i = 1, 41 ) {
    var r = f2(4) + f2(4);
  }
}

// Don't mark upvalue as immutable if written to after prototype definition.
{
  var x = 1;
  var function f() {
    var y = 0;
    for( i=1,100 ) { y+=x; }
    return y;
  }
  assert(f() == 100);
  x = 2;
  assert(f() == 200);
}

