var ctest = require("ctest");

var function ret0() { }
var function ret1() { return 1; }
var function ret2() { return 1,2; }
var function ret3() { return 1,2,3; }
var function retva(...) { return ...; }
var function ret1va(...) { return 1,...; }

var function pack(...) {
  return { n = select('#', ...), ... };
}

var function ck(res, ...) {
  var ok = pack(...);
  if( res.n != ok.n ) { error("nresults wrong: "..res.n.." ~= "..ok.n, 2); }
  for( i=1,res.n ) {
    if( res[i] != ok[i] ) {
      error("result["..i.."] wrong: "..tostring(res[i]).." ~= "..tostring(ok[i]), 2);
    }
  }
}

var function test_adjust_results(testfunc) {

  var function cc(nres, f, ...) {
    return pack(testfunc(nres, f, ...));
  }

  ck(cc(0, ret0));
  ck(cc(0, ret1));
  ck(cc(0, ret2));
  ck(cc(0, ret3));
  ck(cc(0, retva));

  ck(cc(1, ret0), null);
  ck(cc(1, ret1), 1);
  ck(cc(1, ret2), 1);
  ck(cc(1, ret3), 1);
  ck(cc(1, retva), null);
  ck(cc(1, retva, 1), 1);

  ck(cc(2, ret0), null, null);
  ck(cc(2, ret1), 1, null);
  ck(cc(2, ret2), 1, 2);
  ck(cc(2, ret3), 1, 2);
  ck(cc(2, retva), null, null);
  ck(cc(2, retva, 1), 1, null);
  ck(cc(2, retva, 1, 2), 1, 2);

  ck(cc(-1, ret0));
  ck(cc(-1, ret1), 1);
  ck(cc(-1, ret2), 1, 2);
  ck(cc(-1, ret3), 1, 2, 3);
  ck(cc(-1, retva));
  ck(cc(-1, retva, 1), 1);
  ck(cc(-1, retva, 1, 2), 1, 2);
}

test_adjust_results(ctest.call);
test_adjust_results(ctest.pcall_err);


var function gcshrink() {
  for( i=1,10 ) { collectgarbage(); }
}

assert(select('#', ctest.call(2000, gcshrink)) == 2000);
gcshrink();
assert(select('#', ctest.call(7000, gcshrink)) == 7000);
gcshrink();

var function test_yield(resume, yield) {
  var function inpcall() {
    ck(pack(yield(6, 7)), 18, 19);
  }
  var co = coroutine.create(function(...) {
    ck(pack(...), 11, 12);
    ck(pack(yield(1, 2)));
    ck(pack(yield()), 13, 14, 15);
    ck(pack(yield(3, 4, 5)), 16, 17);
    assert(pcall(inpcall) == true);
    return 8, 9;
  });

  ck(pack(resume(co, 11, 12)), true, 1, 2);
  ck(pack(resume(co)), true);
  ck(pack(resume(co, 13, 14, 15)), true, 3, 4, 5);
  ck(pack(resume(co, 16, 17)), true, 6, 7);
  ck(pack(resume(co, 18, 19)), true, 8, 9);
  assert(resume(co) == false);
}

test_yield(coroutine.resume, coroutine.yield);
test_yield(ctest.resume, coroutine.yield);
test_yield(coroutine.resume, ctest.yield);
test_yield(ctest.resume, ctest.yield);

