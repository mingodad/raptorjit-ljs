{ //- ack
  var function Ack(m, n) {
    if( m == 0 ) { return n+1; }
    if( n == 0 ) { return Ack(m-1, 1); }
    return Ack(m-1, (Ack(m, n-1))); // The parentheses are deliberate.
  }
  
  assert(Ack(3,5) == 253);
}

{ //- ack notail
  var function Ack(m, n) {
    if( m == 0 ) { return n+1; }
    if( n == 0 ) { return Ack(m-1, 1); }
    return (Ack(m-1, (Ack(m, n-1)))); // The parentheses are deliberate.
  }
  
  assert(Ack(3,5) == 253);
}

{ //- fac
  var function fac(n) {
    var x = 1;
    for( i=2,n ) {
      x *=   i;
    }
    return x;
  }
  
  assert(fac(10) == 3628800);
}

{ //- ffib
  var function ffib(n) {
    if( n <= 2 ) { return n,1; }
    if( n % 2 == 1 ) {
      var a,b = ffib((n-1)/2);
      var aa = a*a;
      return aa+a*(b+b), aa+b*b;
    } else {
      var a,b = ffib(n/2-1);
      var ab = a+b;
      return ab*ab+a*a, (ab+b)*a;
    }
  }

  var function fib(n) {
    return (ffib(n));
  }

  assert(fib(40) == 165580141);
  assert(fib(39) == 102334155);
  assert(fib(77) == 8944394323791464);
}

{ //- fib
  var function fib(n) {
    if( n < 2 ) { return 1; }
    return fib(n-2) + fib(n-1);
  }

  assert(fib(27) == 317811);
}

{ //- nsieve
  var function nsieve(m) {
    var isPrime = {};
    for( i=2,m ) { isPrime[i] = true; }
    var count = 0;
    for( i=2,m ) {
      if( isPrime[i] ) {
        for( k=i+i,m,i ) { isPrime[k] = false; }
        ++count    ;
      }
    }
    return count;
  }
  
  assert(nsieve(100) == 25);
  assert(nsieve(12345) == 1474);
}

{ //- recsum
  var function sum(n) {
    if( n == 1 ) { return 1; }
    return n + sum(n-1);
  }
  
  for( i=1, 100 ) {
    assert(sum(i) == i*(i+1)/2);
  }
}

{ //- recsump
  var abs = math.abs;
  var function sum(n) {
    if( n == 1 ) { return 1; }
    return abs(n + sum(n-1));
  }
  
  for( i=1, 100 ) {
    assert(sum(i) == i*(i+1)/2);
  }
}

{ //- tak
  var function tak(x, y, z) {
    if( y >= x ) { return z; }
    return tak(tak(x-1, y, z), tak(y-1, z, x), (tak(z-1, x, y)));
  }

  assert(tak(21, 14, 7) == 14);
}
