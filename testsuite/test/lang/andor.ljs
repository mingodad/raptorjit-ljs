{ //- smoke
  var x = ((1 || false) && true) || false;
  assert(x == true);
}

{ //- allcases
  var basiccases = {
    {"null", null},
    {"false", false},
    {"true", true},
    {"10", 10},
  };

  var mem = {basiccases};    // for memoization

  var function allcases (n) {
    if( mem[n] ) { return mem[n]; }
    var res = {};
    // include all smaller cases
    for( _, v in ipairs(allcases(n - 1)) ) {
      res[#res + 1] = v;
    }
    for( i = 1, n - 1 ) {
      for( _, v1 in ipairs(allcases(i)) ) {
        for( _, v2 in ipairs(allcases(n - i)) ) {
    res[#res + 1] = {
      "(" .. v1[1] .. " && " .. v2[1] .. ")",
      v1[2] && v2[2]
    };
    res[#res + 1] = {
      "(" .. v1[1] .. " || " .. v2[1] .. ")",
      v1[2] || v2[2]
    };
        }
      }
    }
    mem[n] = res;   // memoize
    return res;
  }

  for( _, v in pairs(allcases(4)) ) {
    var res = (loadstring || load)("return " .. v[1])();
    if( res != v[2] ) {
      error(string.format("bad conditional eval\n%s\nexpected: %s\ngot: %s",
        v[1], tostring(v[2]), tostring(res)));
    }
  }
}

{ //- tracefib
  // 0001    KSHORT   1   2
  // 0002    ISGE     0   1
  // 0003    JMP      1 => 0006
  // 0004    KSHORT   1   1
  // 0005    JMP      1 => 0013
  //                 ^^^ must be 2
  // fix in jmp_patchtestreg
  var function fib(n) { return (n < 2) && 1 || fib(n-1)+fib(n-2); }
  assert(fib(5) == 8);
  assert(fib(10) == 89);
}
